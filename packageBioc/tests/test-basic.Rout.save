
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This is a testing stub that just provides a basic run-through of all the methods.
> # The real tests are located in inst/tests along with a Bash script for execution
> # and comparison. The separation into two folders is necessary to keep R CMD check
> # running with reasonable speed.
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> both.files <- system.file("exdata", c("rep1.bam", "rep2.bam"), package="csaw")
> pet.file <- system.file("exdata", "pet.bam", package="csaw")
> 
> # Checking data quality prior to counting.
> head(correlateReads(both.files))
[1] -0.0122330007 -0.0004633209  0.0212968091 -0.0339328978 -0.0111739532
[6] -0.0082981606
> head(correlateReads(both.files, cross=FALSE))
[1]  1.000000000 -0.003372143  0.022101578 -0.049465927 -0.001196595
[6] -0.002130977
> 
> getPETSizes(pet.file)
$sizes
[1]  90 150  70  20  10  30   2

$diagnostics
        total        single    unoriented mate.unmapped     inter.chr 
           23             3             2             0             1 

> 
> # Trying to count some single-end data.
> data <- windowCounts(both.files, ext=100)
> head(assay(data))
     [,1] [,2]
[1,]   23   41
[2,]   33   48
[3,]   46   72
[4,]   35   92
[5,]   28  101
[6,]   30  101
> rowData(data)
GRanges with 71 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,   1]      *
   [2]     chrA   [ 51,  51]      *
   [3]     chrA   [101, 101]      *
   [4]     chrA   [151, 151]      *
   [5]     chrA   [201, 201]      *
   ...      ...          ...    ...
  [67]     chrC [1101, 1101]      *
  [68]     chrC [1151, 1151]      *
  [69]     chrC [1201, 1201]      *
  [70]     chrC [1251, 1251]      *
  [71]     chrC [1301, 1301]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345
> data$total
NULL
> 
> data <- windowCounts(both.files, width=500, spacing=200)
> head(assay(data))
     [,1] [,2]
[1,]  204  455
[2,]  195  510
[3,]  186  483
[4,]  200  501
[5,]  187  468
[6,]  127  311
> rowData(data)
GRanges with 19 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA  [  1,  500]      *
   [2]     chrA  [201,  700]      *
   [3]     chrA  [401,  900]      *
   [4]     chrA  [601, 1100]      *
   [5]     chrA  [801, 1298]      *
   ...      ...          ...    ...
  [15]     chrC [ 401,  900]      *
  [16]     chrC [ 601, 1100]      *
  [17]     chrC [ 801, 1300]      *
  [18]     chrC [1001, 1345]      *
  [19]     chrC [1201, 1345]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345
> data$totals
[1] 1349 3291
> 
> data <- windowCounts(both.files, ext=100, param=readParam(minq=100))
> data$totals
[1]  914 2152
> data <- windowCounts(both.files, ext=100, param=readParam(dedup=TRUE))
> data$totals
[1] 1056 2582
> data <- windowCounts(both.files, ext=100, param=readParam(discard=GRanges("chrA", IRanges(50, 500))))
> data$totals
[1] 1186 2916
> data <- windowCounts(both.files, ext=100, param=readParam(restrict="chrA"))
> data$totals
[1]  451 1093
> 
> # Trying to count some paired-end data.
> out <- windowCounts(pet.file, param=readParam(pet="both"), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    2
[4,]    1
[5,]    3
[6,]    2
> out$totals
[1] 7
> rowData(out)
GRanges with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  ---
  seqlengths:
   chrA chrB
    200  100
> out <- windowCounts(pet.file, param=readParam(pet="both", rescue.pairs=TRUE), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    2
[4,]    1
[5,]    6
[6,]    5
> out$totals
[1] 10
> rowData(out)
GRanges with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  ---
  seqlengths:
   chrA chrB
    200  100
> out <- windowCounts(pet.file, param=readParam(pet="first"), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    4
[4,]    2
[5,]    6
[6,]    6
> out$totals
[1] 10
> rowData(out)
GRanges with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  ---
  seqlengths:
   chrA chrB
    200  100
> 
> # Running some basic normalization.
> data <- windowCounts(both.files, ext=100, param=readParam(minq=100, dedup=TRUE))
> normalizeCounts(assay(data), lib.size=data$totals)
[1] 0.990009 1.010092
> normalize(data)
[1] 0.990009 1.010092
> normalizeCounts(assay(data), lib.size=data$totals, logratioTrim=.2)
[1] 0.9901379 1.0099603
> normalizeCounts(assay(data), lib.size=data$totals, method="RLE")
[1] 0.983910 1.016353
> head(normalizeCounts(assay(data), lib.size=data$totals, type="loess"))
           [,1]      [,2]
[1,] -0.4264274 0.4264274
[2,] -0.4085916 0.4085916
[3,] -0.3807671 0.3807671
[4,] -0.3857622 0.3857622
[5,] -0.3718120 0.3718120
[6,] -0.3717137 0.3717137
> head(normalize(data, type="loess"))
           [,1]      [,2]
[1,] -0.4264274 0.4264274
[2,] -0.4085916 0.4085916
[3,] -0.3807671 0.3807671
[4,] -0.3857622 0.3857622
[5,] -0.3718120 0.3718120
[6,] -0.3717137 0.3717137
> head(normalizeCounts(assay(data), lib.size=data$totals, type="loess", span=0.7))
           [,1]      [,2]
[1,] -0.4423041 0.4423041
[2,] -0.4392041 0.4392041
[3,] -0.3999888 0.3999888
[4,] -0.4202036 0.4202036
[5,] -0.3849841 0.3849841
[6,] -0.3984537 0.3984537
> 
> # Assuming someone went around and pulled out some p-values for everybody.
> set.seed(128145-19238)
> nr <- nrow(data)
> tabled <- data.frame(logFC=rnorm(nr), logCPM=rnorm(nr), PValue=rbeta(nr, 1, 2))
> weighting <- rgamma(nr, 2, 1)
> 
> mergeWindows(rowData(data), 10)
$id
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71

$region
GRanges with 71 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,   1]      *
   [2]     chrA   [ 51,  51]      *
   [3]     chrA   [101, 101]      *
   [4]     chrA   [151, 151]      *
   [5]     chrA   [201, 201]      *
   ...      ...          ...    ...
  [67]     chrC [1101, 1101]      *
  [68]     chrC [1151, 1151]      *
  [69]     chrC [1201, 1201]      *
  [70]     chrC [1251, 1251]      *
  [71]     chrC [1301, 1301]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345

> mergeWindows(rowData(data), 100)
$id
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2
[39] 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3

$region
GRanges with 3 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrA [1, 1251]      *
  [2]     chrB [1,  851]      *
  [3]     chrC [1, 1301]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345

> mergeWindows(rowData(data), 100, max.width=500)
$id
 [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5
[39] 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8

$region
GRanges with 8 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [   1,  451]      *
  [2]     chrA [ 501,  951]      *
  [3]     chrA [1001, 1251]      *
  [4]     chrB [   1,  451]      *
  [5]     chrB [ 501,  851]      *
  [6]     chrC [   1,  451]      *
  [7]     chrC [ 501,  951]      *
  [8]     chrC [1001, 1301]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345

> merged <- mergeWindows(rowData(data), 100, sign=tabled$logFC > 0)
> merged
$id
 [1]  1  2  2  3  4  4  4  5  5  6  7  8  9  9  9  9 10 10 11 12 13 14 15 15 15
[26] 15 16 17 18 18 18 18 18 19 19 20 21 22 23 24 24 25 25 26 27 28 29 29 30 30
[51] 31 31 31 31 32 33 34 34 34 34 35 36 37 37 38 39 40 41 41 42 43

$region
GRanges with 43 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,   1]      *
   [2]     chrA   [ 51, 101]      *
   [3]     chrA   [151, 151]      *
   [4]     chrA   [201, 301]      *
   [5]     chrA   [351, 401]      *
   ...      ...          ...    ...
  [39]     chrC [1051, 1051]      *
  [40]     chrC [1101, 1101]      *
  [41]     chrC [1151, 1201]      *
  [42]     chrC [1251, 1251]      *
  [43]     chrC [1301, 1301]      *
  ---
  seqlengths:
   chrA chrB chrC
   1298  870 1345

> 
> head(combineTests(merged$id, tabled))
       logFC      logCPM     PValue       FDR
1  0.2131783  0.53648572 0.46328451 0.5622769
2 -0.3328419  0.43621777 0.79272727 0.8116017
3  1.4199598 -0.91833741 0.27967201 0.5047602
4 -0.3672297  0.50799380 0.08956765 0.4125151
5  1.2209111  0.43780453 0.28172663 0.5047602
6 -1.1006805 -0.09313516 0.01949563 0.4125151
> head(combineTests(merged$id, tabled, weight=weighting))
       logFC      logCPM     PValue       FDR
1  0.2131783  0.53648572 0.46328451 0.5622769
2 -0.3799242  1.09074962 0.79272727 0.8116017
3  1.4199598 -0.91833741 0.27967201 0.5228651
4 -0.2070669  1.09247874 0.04669873 0.4255938
5  1.0718613  0.58461474 0.24536526 0.4795776
6 -1.1006805 -0.09313516 0.01949563 0.3373185
> 
> head(getBestTest(merged$id, tabled))
  best     PValue       FDR
1    1 0.46328451 0.5783419
2    3 1.00000000 1.0000000
3    4 0.27967201 0.5047602
4    5 0.08956765 0.4442470
5    9 0.28172663 0.5047602
6   10 0.01949563 0.4442470
> head(getBestTest(merged$id, tabled, weight=weighting))
  best     PValue       FDR
1    1 0.46328451 0.5783419
2    2 1.00000000 1.0000000
3    4 0.27967201 0.5228651
4    5 0.04669873 0.4255938
5    9 0.24536526 0.4795776
6   10 0.01949563 0.3373185
> head(getBestTest(merged$id, tabled, mode="logCPM"))
  best     PValue       FDR
1    1 0.46328451 0.5622769
2    2 0.79272727 0.8116017
3    4 0.27967201 0.5228651
4    5 0.02985588 0.2567606
5    9 0.14086332 0.4038082
6   10 0.01949563 0.2567606
> 
> # Pulling out some diagnostics.
> suppressPackageStartupMessages(require(org.Mm.eg.db))
> suppressPackageStartupMessages(require(TxDb.Mmusculus.UCSC.mm10.knownGene))
> 
> current <- readRDS(system.file("exdata", "exrange.rds", package="csaw"))
> output <- detailRanges(current, TxDb.Mmusculus.UCSC.mm10.knownGene, org.Mm.eg.db)
> head(output$overlap)
[1] "Nrxn3|8|+"         ""                  ""                 
[4] "1700007G11Rik|I|+" ""                  ""                 
> head(output$right)
[1] "Nrxn3|9|+[3846]" "Rprm|1|-[2293]"  ""                ""               
[5] ""                ""               
> head(output$left)
[1] ""                        ""                       
[3] ""                        "1700007G11Rik|5|+[2890]"
[5] ""                        ""                       
>      
> output <- detailRanges(current, TxDb.Mmusculus.UCSC.mm10.knownGene, org.Mm.eg.db, promoter=c(2000, 500))
> head(output$overlap)
[1] "Nrxn3|8|+"         ""                  ""                 
[4] "1700007G11Rik|I|+" ""                  ""                 
> head(output$right)
[1] "Nrxn3|9|+[3846]" "Rprm|1|-[2293]"  ""                ""               
[5] ""                ""               
> head(output$left)
[1] ""                        ""                       
[3] ""                        "1700007G11Rik|5|+[2890]"
[5] ""                        ""                       
> 
> output <- detailRanges(current, TxDb.Mmusculus.UCSC.mm10.knownGene, org.Mm.eg.db, dist=3000)
> head(output$overlap)
[1] "Nrxn3|8|+"         ""                  ""                 
[4] "1700007G11Rik|I|+" ""                  ""                 
> head(output$right)
[1] ""               "Rprm|1|-[2293]" ""               ""              
[5] ""               ""              
> head(output$left)
[1] ""                        ""                       
[3] ""                        "1700007G11Rik|5|+[2890]"
[5] ""                        ""                       
> 
> # Pulling out some reads. 
> extractReads(GRanges("chrA", IRanges(100, 500)), both.files[1])
GRanges with 143 ranges and 0 metadata columns:
        seqnames     ranges strand
           <Rle>  <IRanges>  <Rle>
    [1]     chrA [ 93, 102]      -
    [2]     chrA [ 94, 103]      +
    [3]     chrA [106, 115]      +
    [4]     chrA [106, 115]      -
    [5]     chrA [107, 116]      -
    ...      ...        ...    ...
  [139]     chrA [490, 499]      -
  [140]     chrA [491, 500]      -
  [141]     chrA [499, 508]      -
  [142]     chrA [500, 509]      +
  [143]     chrA [500, 509]      +
  ---
  seqlengths:
   chrA
   1298
> extractReads(GRanges("chrA", IRanges(50, 100)), both.files[1])
GRanges with 27 ranges and 0 metadata columns:
       seqnames    ranges strand
          <Rle> <IRanges>  <Rle>
   [1]     chrA  [43, 52]      +
   [2]     chrA  [44, 53]      -
   [3]     chrA  [51, 60]      +
   [4]     chrA  [52, 61]      -
   [5]     chrA  [57, 66]      +
   ...      ...       ...    ...
  [23]     chrA [88,  97]      -
  [24]     chrA [89,  98]      -
  [25]     chrA [90,  99]      +
  [26]     chrA [93, 102]      -
  [27]     chrA [94, 103]      +
  ---
  seqlengths:
   chrA
   1298
> extractReads(GRanges("chrA", IRanges(50, 100)), both.files[1], param=readParam(dedup=TRUE))
GRanges with 19 ranges and 0 metadata columns:
       seqnames    ranges strand
          <Rle> <IRanges>  <Rle>
   [1]     chrA  [51, 60]      +
   [2]     chrA  [57, 66]      +
   [3]     chrA  [57, 66]      -
   [4]     chrA  [59, 68]      -
   [5]     chrA  [62, 71]      +
   ...      ...       ...    ...
  [15]     chrA [88,  97]      +
  [16]     chrA [88,  97]      -
  [17]     chrA [89,  98]      -
  [18]     chrA [90,  99]      +
  [19]     chrA [93, 102]      -
  ---
  seqlengths:
   chrA
   1298
> extractReads(GRanges("chrB", IRanges(50, 100)), pet.file, param=readParam(pet="both"))
GRanges with 2 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrB [50,  79]      *
  [2]     chrB [99, 100]      *
  ---
  seqlengths:
   chrB
    100
> extractReads(GRanges("chrB", IRanges(50, 100)), pet.file, param=readParam(pet="second"))
GRanges with 4 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrB [70,  79]      -
  [2]     chrB [75,  84]      +
  [3]     chrB [90,  99]      +
  [4]     chrB [99, 100]      -
  ---
  seqlengths:
   chrB
    100
> 
> 
> proc.time()
   user  system elapsed 
 33.798   0.561  34.427 
