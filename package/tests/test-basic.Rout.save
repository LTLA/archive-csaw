
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This is a testing stub that just provides a basic run-through of all the methods.
> # The real tests are located in inst/tests along with a Bash script for execution
> # and comparison. The separation into two folders is necessary to keep R CMD check
> # running with reasonable speed.
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> both.files <- system.file("exdata", c("rep1.bam", "rep2.bam"), package="csaw")
> pe.file <- system.file("exdata", "pet.bam", package="csaw")
> 
> # Checking data quality prior to counting.
> head(correlateReads(both.files))
[1] -0.0122330007 -0.0004633209  0.0212968091 -0.0339328978 -0.0111739532
[6] -0.0082981606
> head(correlateReads(both.files, cross=FALSE))
[1]  1.000000000 -0.003372143  0.022101578 -0.049465927 -0.001196595
[6] -0.002130977
> 
> getPESizes(pe.file)
$sizes
[1]  90 150  70  20  10  30   2

$diagnostics
  total.reads  mapped.reads        single mate.unmapped    unoriented 
           23            23             3             0             2 
    inter.chr 
            1 

> 
> # Trying to count some single-end data.
> data <- windowCounts(both.files, ext=100)
> head(assay(data))
     [,1] [,2]
[1,]   43   71
[2,]   57   89
[3,]   56  120
[4,]   53  141
[5,]   40  152
[6,]   59  135
> rowRanges(data)
GRanges object with 71 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,  50]      *
   [2]     chrA   [ 51, 100]      *
   [3]     chrA   [101, 150]      *
   [4]     chrA   [151, 200]      *
   [5]     chrA   [201, 250]      *
   ...      ...          ...    ...
  [67]     chrC [1101, 1150]      *
  [68]     chrC [1151, 1200]      *
  [69]     chrC [1201, 1250]      *
  [70]     chrC [1251, 1300]      *
  [71]     chrC [1301, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome
> data$totals
[1] 1349 3291
> 
> data <- windowCounts(both.files, width=500, spacing=200)
> head(assay(data))
     [,1] [,2]
[1,]  204  455
[2,]  195  510
[3,]  186  483
[4,]  200  501
[5,]  187  468
[6,]  127  311
> rowRanges(data)
GRanges object with 19 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA  [  1,  500]      *
   [2]     chrA  [201,  700]      *
   [3]     chrA  [401,  900]      *
   [4]     chrA  [601, 1100]      *
   [5]     chrA  [801, 1298]      *
   ...      ...          ...    ...
  [15]     chrC [ 401,  900]      *
  [16]     chrC [ 601, 1100]      *
  [17]     chrC [ 801, 1300]      *
  [18]     chrC [1001, 1345]      *
  [19]     chrC [1201, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome
> data$totals
[1] 1349 3291
> 
> data <- windowCounts(both.files, ext=100, param=readParam(minq=100))
> data$totals
[1]  914 2152
> data <- windowCounts(both.files, ext=100, param=readParam(dedup=TRUE))
> data$totals
[1] 1056 2582
> data <- windowCounts(both.files, ext=100, param=readParam(discard=GRanges("chrA", IRanges(50, 500))))
> data$totals
[1] 1186 2916
> data <- windowCounts(both.files, ext=100, param=readParam(restrict="chrA"))
> data$totals
[1]  451 1093
> 
> # Trying to count some paired-end data.
> out <- windowCounts(pe.file, param=readParam(pe="both"), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    2
[4,]    1
[5,]    3
[6,]    2
> out$totals
[1] 7
> rowRanges(out)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  -------
  seqinfo: 2 sequences from an unspecified genome
> out <- windowCounts(pe.file, param=readParam(pe="both", rescue.ext=100), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    2
[4,]    1
[5,]    6
[6,]    5
> out$totals
[1] 10
> rowRanges(out)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  -------
  seqinfo: 2 sequences from an unspecified genome
> out <- windowCounts(pe.file, param=readParam(pe="first"), width=100, filter=1L)
> assay(out)
     [,1]
[1,]    3
[2,]    4
[3,]    4
[4,]    2
[5,]    6
[6,]    6
> out$totals
[1] 10
> rowRanges(out)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [  1, 100]      *
  [2]     chrA [ 51, 150]      *
  [3]     chrA [101, 200]      *
  [4]     chrA [151, 200]      *
  [5]     chrB [  1, 100]      *
  [6]     chrB [ 51, 100]      *
  -------
  seqinfo: 2 sequences from an unspecified genome
> 
> # Trying to convert it to a DGEList.
> asDGEList(data)
An object of class "DGEList"
$counts
  Sample1 Sample2
1      43      71
2      57      89
3      56     120
4      53     141
5      40     152
21 more rows ...

$samples
        group lib.size norm.factors
Sample1     1      451            1
Sample2     1     1093            1

> asDGEList(data, lib.size=c(10, 10))
An object of class "DGEList"
$counts
  Sample1 Sample2
1      43      71
2      57      89
3      56     120
4      53     141
5      40     152
21 more rows ...

$samples
        group lib.size norm.factors
Sample1     1       10            1
Sample2     1       10            1

> asDGEList(data, norm=c(1,2))
An object of class "DGEList"
$counts
  Sample1 Sample2
1      43      71
2      57      89
3      56     120
4      53     141
5      40     152
21 more rows ...

$samples
        group lib.size norm.factors
Sample1     1      451            1
Sample2     1     1093            2

> 
> temp <- data 
> temp$totals <- NULL 
> asDGEList(temp) # Should spit out a warning.
An object of class "DGEList"
$counts
  Sample1 Sample2
1      43      71
2      57      89
3      56     120
4      53     141
5      40     152
21 more rows ...

$samples
        group lib.size norm.factors
Sample1     1     1293            1
Sample2     1     3142            1

Warning message:
In .local(object, ...) :
  library sizes not found in 'totals', setting to NULL
> 
> # Running some basic normalization.
> data <- windowCounts(both.files, ext=100, param=readParam(minq=100, dedup=TRUE))
> 
> normOffsets(assay(data), lib.size=data$totals)
[1] 1.001197 0.998804
> normOffsets(assay(data), lib.size=data$totals, logratioTrim=.2)
[1] 1.003816 0.996199
> normOffsets(assay(data), lib.size=data$totals, method="RLE")
[1] 1.0037890 0.9962253
> normOffsets(data)
[1] 1.001197 0.998804
> normOffsets(data, logratioTrim=0.1)
[1] 1.0026764 0.9973307
> normOffsets(data, method="upperquartile")
[1] 0.9834651 1.0168129
> 
> head(normOffsets(assay(data), lib.size=data$totals, type="loess"))
           [,1]      [,2]
[1,] -0.4047876 0.4047876
[2,] -0.4328410 0.4328410
[3,] -0.3864553 0.3864553
[4,] -0.4101296 0.4101296
[5,] -0.3788945 0.3788945
[6,] -0.3514597 0.3514597
> head(normOffsets(assay(data), lib.size=data$totals, type="loess", span=0.7))
           [,1]      [,2]
[1,] -0.4297765 0.4297765
[2,] -0.4391936 0.4391936
[3,] -0.3867962 0.3867962
[4,] -0.4215479 0.4215479
[5,] -0.3858107 0.3858107
[6,] -0.3915074 0.3915074
> head(normOffsets(data, type="loess"))
           [,1]      [,2]
[1,] -0.4047876 0.4047876
[2,] -0.4328410 0.4328410
[3,] -0.3864553 0.3864553
[4,] -0.4101296 0.4101296
[5,] -0.3788945 0.3788945
[6,] -0.3514597 0.3514597
> head(normOffsets(data, type="loess", span=0.5))
           [,1]      [,2]
[1,] -0.4120470 0.4120470
[2,] -0.4350054 0.4350054
[3,] -0.3740611 0.3740611
[4,] -0.4122536 0.4122536
[5,] -0.3722926 0.3722926
[6,] -0.3835921 0.3835921
> 
> # Assuming someone went around and pulled out some p-values for everybody.
> set.seed(128145-19238)
> nr <- nrow(data)
> tabled <- data.frame(logFC=rnorm(nr), logCPM=rnorm(nr), PValue=rbeta(nr, 1, 2))
> weighting <- rgamma(nr, 2, 1)
> 
> mergeWindows(rowRanges(data), -1)
$id
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71

$region
GRanges object with 71 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,  50]      *
   [2]     chrA   [ 51, 100]      *
   [3]     chrA   [101, 150]      *
   [4]     chrA   [151, 200]      *
   [5]     chrA   [201, 250]      *
   ...      ...          ...    ...
  [67]     chrC [1101, 1150]      *
  [68]     chrC [1151, 1200]      *
  [69]     chrC [1201, 1250]      *
  [70]     chrC [1251, 1300]      *
  [71]     chrC [1301, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome

> mergeWindows(rowRanges(data), 100)
$id
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2
[39] 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3

$region
GRanges object with 3 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrA [1, 1298]      *
  [2]     chrB [1,  870]      *
  [3]     chrC [1, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome

> mergeWindows(rowRanges(data), 100, max.width=500)
$id
 [1] 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 5
[39] 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8

$region
GRanges object with 8 ranges and 0 metadata columns:
      seqnames      ranges strand
         <Rle>   <IRanges>  <Rle>
  [1]     chrA [  1,  450]      *
  [2]     chrA [451,  850]      *
  [3]     chrA [851, 1298]      *
  [4]     chrB [  1,  450]      *
  [5]     chrB [451,  870]      *
  [6]     chrC [  1,  450]      *
  [7]     chrC [451,  900]      *
  [8]     chrC [901, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome

> merged <- mergeWindows(rowRanges(data), 100, sign=tabled$logFC > 0)
> merged
$id
 [1]  1  2  2  3  4  4  4  5  5  6  7  8  9  9  9  9 10 10 11 12 13 14 15 15 15
[26] 15 16 17 18 18 18 18 18 19 19 20 21 22 23 24 24 25 25 26 27 28 29 29 30 30
[51] 31 31 31 31 32 33 34 34 34 34 35 36 37 37 38 39 40 41 41 42 43

$region
GRanges object with 43 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  1,  50]      *
   [2]     chrA   [ 51, 150]      *
   [3]     chrA   [151, 200]      *
   [4]     chrA   [201, 350]      *
   [5]     chrA   [351, 450]      *
   ...      ...          ...    ...
  [39]     chrC [1051, 1100]      *
  [40]     chrC [1101, 1150]      *
  [41]     chrC [1151, 1250]      *
  [42]     chrC [1251, 1300]      *
  [43]     chrC [1301, 1345]      *
  -------
  seqinfo: 3 sequences from an unspecified genome

> 
> head(combineTests(merged$id, tabled))
  nWindows logFC.up logFC.down     PValue       FDR
1        1        0          0 0.46328451 0.5622769
2        2        0          0 0.79272727 0.8116017
3        1        1          0 0.27967201 0.5047602
4        3        0          1 0.08956765 0.4125151
5        2        1          0 0.28172663 0.5047602
6        1        0          1 0.01949563 0.4125151
> head(combineTests(merged$id, tabled, weight=weighting))
  nWindows logFC.up logFC.down     PValue       FDR
1        1        0          0 0.46328451 0.5622769
2        2        0          0 0.79272727 0.8116017
3        1        1          0 0.27967201 0.5228651
4        3        0          1 0.04669873 0.4255938
5        2        1          0 0.24536526 0.4795776
6        1        0          1 0.01949563 0.3373185
> 
> head(getBestTest(merged$id, tabled))
  best       logFC      logCPM     PValue       FDR
1    1  0.21317827  0.53648572 0.46328451 0.5783419
2    3 -0.24872062 -0.73322697 1.00000000 1.0000000
3    4  1.41995983 -0.91833741 0.27967201 0.5047602
4    5 -0.01753979  1.78172679 0.08956765 0.4442470
5    9  0.21512818  1.42847478 0.28172663 0.5047602
6   10 -1.10068046 -0.09313516 0.01949563 0.4442470
> head(getBestTest(merged$id, tabled, weight=weighting))
  best       logFC      logCPM     PValue       FDR
1    1  0.21317827  0.53648572 0.46328451 0.5783419
2    2 -0.41696325  1.60566251 1.00000000 1.0000000
3    4  1.41995983 -0.91833741 0.27967201 0.5228651
4    5 -0.01753979  1.78172679 0.04669873 0.4255938
5    9  0.21512818  1.42847478 0.24536526 0.4795776
6   10 -1.10068046 -0.09313516 0.01949563 0.3373185
> head(getBestTest(merged$id, tabled, by.pval=FALSE))
  best       logFC      logCPM     PValue       FDR
1    1  0.21317827  0.53648572 0.46328451 0.5622769
2    2 -0.41696325  1.60566251 0.79272727 0.8116017
3    4  1.41995983 -0.91833741 0.27967201 0.5228651
4    5 -0.01753979  1.78172679 0.02985588 0.2567606
5    9  0.21512818  1.42847478 0.14086332 0.4038082
6   10 -1.10068046 -0.09313516 0.01949563 0.2567606
> 
> # Pulling out some diagnostics.
> suppressPackageStartupMessages(require(org.Mm.eg.db))
> suppressPackageStartupMessages(require(TxDb.Mmusculus.UCSC.mm10.knownGene))
> 
> current <- readRDS(system.file("exdata", "exrange.rds", package="csaw"))
> output <- detailRanges(current, TxDb.Mmusculus.UCSC.mm10.knownGene, org.Mm.eg.db)
> head(output$overlap)
[1] "Nrxn3|8|+"         ""                  ""                 
[4] "1700007G11Rik|I|+" "Mannr|2|+"         ""                 
> head(output$right)
[1] "Nrxn3|9|+[3846]" "Rprm|1|-[2293]"  ""                ""               
[5] ""                ""               
> head(output$left)
[1] ""                        ""                       
[3] ""                        "1700007G11Rik|5|+[2890]"
[5] ""                        ""                       
> 
> # Pulling out some reads. 
> extractReads(both.files[1], GRanges("chrA", IRanges(100, 500)))
GRanges object with 143 ranges and 0 metadata columns:
        seqnames     ranges strand
           <Rle>  <IRanges>  <Rle>
    [1]     chrA [ 93, 102]      -
    [2]     chrA [ 94, 103]      +
    [3]     chrA [106, 115]      +
    [4]     chrA [106, 115]      -
    [5]     chrA [107, 116]      -
    ...      ...        ...    ...
  [139]     chrA [490, 499]      -
  [140]     chrA [491, 500]      -
  [141]     chrA [499, 508]      -
  [142]     chrA [500, 509]      +
  [143]     chrA [500, 509]      +
  -------
  seqinfo: 1 sequence from an unspecified genome
> extractReads(both.files[1], GRanges("chrA", IRanges(50, 100)))
GRanges object with 27 ranges and 0 metadata columns:
       seqnames    ranges strand
          <Rle> <IRanges>  <Rle>
   [1]     chrA  [43, 52]      +
   [2]     chrA  [44, 53]      -
   [3]     chrA  [51, 60]      +
   [4]     chrA  [52, 61]      -
   [5]     chrA  [57, 66]      +
   ...      ...       ...    ...
  [23]     chrA [88,  97]      -
  [24]     chrA [89,  98]      -
  [25]     chrA [90,  99]      +
  [26]     chrA [93, 102]      -
  [27]     chrA [94, 103]      +
  -------
  seqinfo: 1 sequence from an unspecified genome
> extractReads(both.files[1], GRanges("chrA", IRanges(50, 100)), param=readParam(dedup=TRUE))
GRanges object with 19 ranges and 0 metadata columns:
       seqnames    ranges strand
          <Rle> <IRanges>  <Rle>
   [1]     chrA  [51, 60]      +
   [2]     chrA  [57, 66]      +
   [3]     chrA  [57, 66]      -
   [4]     chrA  [59, 68]      -
   [5]     chrA  [62, 71]      +
   ...      ...       ...    ...
  [15]     chrA [88,  97]      +
  [16]     chrA [88,  97]      -
  [17]     chrA [89,  98]      -
  [18]     chrA [90,  99]      +
  [19]     chrA [93, 102]      -
  -------
  seqinfo: 1 sequence from an unspecified genome
> extractReads(pe.file, GRanges("chrB", IRanges(50, 100)), param=readParam(pe="both"))
GRanges object with 2 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrB [50,  79]      *
  [2]     chrB [99, 100]      *
  -------
  seqinfo: 1 sequence from an unspecified genome
> extractReads(pe.file, GRanges("chrB", IRanges(50, 100)), param=readParam(pe="second"))
GRanges object with 4 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrB [70,  79]      -
  [2]     chrB [75,  84]      +
  [3]     chrB [90,  99]      +
  [4]     chrB [99, 100]      -
  -------
  seqinfo: 1 sequence from an unspecified genome
> 
> 
> proc.time()
   user  system elapsed 
 12.391   0.207  12.599 
