
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This tests the combining power of the combineTests function.
> 
> nativemerge <- function(reg, tol, sign=NULL) {
+ 	n<-length(reg)
+ 	o<-order(reg)
+ 	reg<-reg[o]
+ 	
+ 	increment<-integer(n)
+ 	chrends<-runLength(seqnames(reg))
+ 	increment[c(1, cumsum(chrends[-length(chrends)])+1)]<-1L
+ 	to.next<-c(0L, start(reg[-1])-end(reg[-n])-1)
+ 	increment[to.next > tol]<-1L
+ 
+ 	# If a sign is supplied...
+ 	if (!is.null(sign)) { 
+ 		posfc<-sign[o]
+ 		altered.sign<-c(TRUE, posfc[-1]!=posfc[-n])
+ 		increment[altered.sign]<-1L
+ 	}
+ 
+ 	merged.ids<-cumsum(increment)
+ 	merged.ids[o]<-merged.ids
+ 	return(merged.ids)
+ }
> 
> comp <- function(reg, tab, tol) {
+ 	ids<-mergeWindows(reg, tol=tol)
+ 	merged.ids<-nativemerge(reg, tol=tol)
+ 	if (!identical(merged.ids, ids$id)) { stop("merging IDs are not identical") }
+ 	out<-combineTests(ids$id, tab)
+ 
+ 	# Aggregating on the merging ID's to get average log-FC, average log-CPM, and Simes.
+ 	almostidentical <- function(x, y, tol=1e-8) { 
+ 		if (length(x)!=length(y)) { return(FALSE) }
+ 		return(all(abs((x-y)/(x+y+1e-6)) < tol))
+ 	}
+ 
+ 	ologfc<-aggregate(tab$logFC~merged.ids, FUN=mean, data=NULL)
+ 	if (!almostidentical(ologfc[,2], out$logFC)) { stop("average log-FC's are not identical"); }
+ 	ologcpm<-aggregate(tab$logCPM~merged.ids, FUN=mean, data=NULL)
+ 	if (!almostidentical(ologcpm[,2], out$logCPM)) { stop("average log-CPM's are not identical"); }
+ 	osimes<-aggregate(tab$PValue~merged.ids, FUN=function(x) { min(p.adjust(x, method="BH")) }, data=NULL)
+ 	if (!almostidentical(osimes[,2], out$PValue)) { stop("combined p-values are not identical"); }
+ 	if (!almostidentical(p.adjust(osimes[,2], method="BH"), out$FDR)) { stop("q-values are not identical"); }
+ 
+ 	# Checking if we get the same results after reversing the ids (ensures internal re-ordering is active).
+ 	re.o<-length(ids$id):1
+ 	out2<-combineTests(ids$id[re.o], tab[re.o,])
+ 	if (!almostidentical(out$logFC, out2$logFC) || !almostidentical(out$logCPM, out2$logCPM)
+ 			|| !almostidentical(out$PValue, out2$PValue)) { stop("values not preserved after shuffling"); }
+ 
+ 	# Adding some tests if there's multiple log-FC's in 'tab'.
+ 	is.fc<-which(colnames(tab)=="logFC")
+ 	colnames(tab)[is.fc]<-"logFC.1"
+ 	tab$logFC.2<--tab$logFC.1
+     out<-combineTests(ids$id, tab)
+ 	if (!almostidentical(out$logFC.1, -out$logFC.2)) { stop("check failed for multiple log-FC columns") }
+ 
+ 	# Also checking with weights for the Simes p-values.
+ 	rand.weights<-runif(length(ids$id), 0, 1)
+     out2<-combineTests(ids$id, tab, weight=rand.weights)
+ 	checker<-split(data.frame(tab$PValue, rand.weights), merged.ids)
+ 	wsimes<-sapply(checker, FUN=function(x) {
+ 		o<-order(x[,1])
+ 		min(x[o,1]*sum(x[,2])/cumsum(x[o,2]))
+ 	})
+ 	if (!almostidentical(wsimes, out2$PValue)	) { stop("weighted combined p-values don't match up") }
+     out2<-combineTests(ids$id[re.o], tab[re.o,], weight=rand.weights[re.o])
+ 	if (!almostidentical(wsimes, out2$PValue)	) { stop("weighted combined p-values don't match up after shuffling") }
+ 
+ 	# Checking the reported value of each region.
+ 	ostarts<-aggregate(start(reg)~ merged.ids, FUN=min, data=NULL)
+ 	if (!identical(ostarts[,2], start(ids$region))) { stop("region starts do not match up") }
+ 	oends<-aggregate(end(reg)~merged.ids, FUN=max, data=NULL)
+ 	if (!identical(oends[,2], end(ids$region))) { stop("region ends do not match up") }
+ 	to.use<-!duplicated(merged.ids)
+ 	if (!identical(seqnames(reg)[to.use], seqnames(ids$region))) { stop("region chromosomes do not match up") }
+ 	return(ids$region)
+ }
> 
> source("simsam.R")
> 
> ###################################################################################################
> 
> set.seed(2135045)
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> 
> chrs<-c(chrA=1000, chrB=2000, chrC=5000)
> blah<-generateWindows(chrs, 200, 1)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [ 3,  606]      *
  [2]     chrB [10, 1137]      *
  [3]     chrC [12, 2523]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 200, 1)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [ 2,  608]      *
  [2]     chrB [ 5, 1098]      *
  [3]     chrC [24, 2649]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 200, 10)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [ 2,  596]      *
  [2]     chrB [ 9, 1112]      *
  [3]     chrC [20, 2463]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 50)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames     ranges strand
         <Rle>  <IRanges>  <Rle>
  [1]     chrA [ 7,  635]      *
  [2]     chrB [ 5, 1185]      *
  [3]     chrC [45, 2542]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 1)
> comp(blah$region, blah$table, 10L)
GRanges object with 131 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1, 482]      *
    [2]     chrB    [16,  31]      *
    [3]     chrB    [43,  52]      *
    [4]     chrB    [70,  70]      *
    [5]     chrB    [85,  91]      *
    ...      ...          ...    ...
  [127]     chrC [2612, 2612]      *
  [128]     chrC [2638, 2638]      *
  [129]     chrC [2678, 2678]      *
  [130]     chrC [2698, 2698]      *
  [131]     chrC [2722, 2722]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 1)
> comp(blah$region, blah$table, 20L)
GRanges object with 62 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA   [  6, 551]      *
   [2]     chrB   [ 13, 989]      *
   [3]     chrC   [ 19,  39]      *
   [4]     chrC   [ 68,  74]      *
   [5]     chrC   [107, 119]      *
   ...      ...          ...    ...
  [58]     chrC [2351, 2351]      *
  [59]     chrC [2397, 2414]      *
  [60]     chrC [2453, 2481]      *
  [61]     chrC [2517, 2517]      *
  [62]     chrC [2546, 2546]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 20)
> comp(blah$region, blah$table, 10L)
GRanges object with 43 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA  [  7,  564]      *
   [2]     chrB  [ 13, 1150]      *
   [3]     chrC  [ 12,   74]      *
   [4]     chrC  [105,  124]      *
   [5]     chrC  [145,  230]      *
   ...      ...          ...    ...
  [39]     chrC [2316, 2335]      *
  [40]     chrC [2353, 2417]      *
  [41]     chrC [2443, 2506]      *
  [42]     chrC [2521, 2540]      *
  [43]     chrC [2570, 2589]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 1)
> comp(blah$region, blah$table, 20L)
GRanges object with 58 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA  [  6,  532]      *
   [2]     chrB  [ 17, 1014]      *
   [3]     chrC  [  8,   17]      *
   [4]     chrC  [ 66,   80]      *
   [5]     chrC  [106,  123]      *
   ...      ...          ...    ...
  [54]     chrC [2279, 2293]      *
  [55]     chrC [2333, 2393]      *
  [56]     chrC [2429, 2429]      *
  [57]     chrC [2472, 2474]      *
  [58]     chrC [2515, 2515]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 100, 1)
> comp(blah$region, blah$table, 20L)
GRanges object with 67 ranges and 0 metadata columns:
       seqnames       ranges strand
          <Rle>    <IRanges>  <Rle>
   [1]     chrA  [  2,  525]      *
   [2]     chrB  [ 13, 1027]      *
   [3]     chrC  [ 43,   43]      *
   [4]     chrC  [ 67,   67]      *
   [5]     chrC  [109,  109]      *
   ...      ...          ...    ...
  [63]     chrC [2565, 2565]      *
  [64]     chrC [2601, 2613]      *
  [65]     chrC [2641, 2641]      *
  [66]     chrC [2678, 2685]      *
  [67]     chrC [2717, 2717]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> # Trying again with some larger chromosomes.
> 
> chrs<-c(chrA=10000, chrB=20000, chrC=50000)
> blah<-generateWindows(chrs, 500, 1)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames      ranges strand
         <Rle>   <IRanges>  <Rle>
  [1]     chrA [ 2,  5156]      *
  [2]     chrB [ 3,  9815]      *
  [3]     chrC [48, 24961]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 200, 1)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames      ranges strand
         <Rle>   <IRanges>  <Rle>
  [1]     chrA [12,  4921]      *
  [2]     chrB [28, 10212]      *
  [3]     chrC [62, 23951]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 10)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames      ranges strand
         <Rle>   <IRanges>  <Rle>
  [1]     chrA [12,  5057]      *
  [2]     chrB [25, 10309]      *
  [3]     chrC [57, 25162]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 50)
> comp(blah$region, blah$table, 1000L)
GRanges object with 3 ranges and 0 metadata columns:
      seqnames      ranges strand
         <Rle>   <IRanges>  <Rle>
  [1]     chrA [ 5,  5504]      *
  [2]     chrB [30, 10102]      *
  [3]     chrC [81, 25375]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 1)
> comp(blah$region, blah$table, 10L)
GRanges object with 1023 ranges and 0 metadata columns:
         seqnames         ranges strand
            <Rle>      <IRanges>  <Rle>
     [1]     chrA       [18, 26]      *
     [2]     chrA       [42, 45]      *
     [3]     chrA       [57, 57]      *
     [4]     chrA       [75, 78]      *
     [5]     chrA       [90, 90]      *
     ...      ...            ...    ...
  [1019]     chrC [24986, 24986]      *
  [1020]     chrC [25009, 25009]      *
  [1021]     chrC [25096, 25096]      *
  [1022]     chrC [25182, 25182]      *
  [1023]     chrC [25210, 25210]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 1)
> comp(blah$region, blah$table, 20L)
GRanges object with 661 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA    [  5, 5383]      *
    [2]     chrB    [ 38,   48]      *
    [3]     chrB    [ 85,  136]      *
    [4]     chrB    [158,  158]      *
    [5]     chrB    [191,  191]      *
    ...      ...            ...    ...
  [657]     chrC [25653, 25653]      *
  [658]     chrC [25727, 25727]      *
  [659]     chrC [25787, 25801]      *
  [660]     chrC [25841, 25851]      *
  [661]     chrC [25934, 25934]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 20)
> comp(blah$region, blah$table, 10L)
GRanges object with 476 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA    [  7, 5195]      *
    [2]     chrB    [ 17,  122]      *
    [3]     chrB    [138,  157]      *
    [4]     chrB    [173,  207]      *
    [5]     chrB    [225,  269]      *
    ...      ...            ...    ...
  [472]     chrC [24705, 24724]      *
  [473]     chrC [24780, 24799]      *
  [474]     chrC [24870, 24889]      *
  [475]     chrC [24911, 24930]      *
  [476]     chrC [24960, 24979]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 20)
> comp(blah$region, blah$table, 10L)
GRanges object with 476 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA    [ 14, 5313]      *
    [2]     chrB    [  3,   87]      *
    [3]     chrB    [106,  125]      *
    [4]     chrB    [145,  164]      *
    [5]     chrB    [182,  201]      *
    ...      ...            ...    ...
  [472]     chrC [24804, 24823]      *
  [473]     chrC [24846, 24865]      *
  [474]     chrC [24897, 24925]      *
  [475]     chrC [24981, 25000]      *
  [476]     chrC [25041, 25060]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> blah<-generateWindows(chrs, 500, 20)
> comp(blah$region, blah$table, 10L)
GRanges object with 456 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA    [  4, 5351]      *
    [2]     chrB    [ 18,   97]      *
    [3]     chrB    [110,  129]      *
    [4]     chrB    [141,  160]      *
    [5]     chrB    [172,  262]      *
    ...      ...            ...    ...
  [452]     chrC [23995, 24014]      *
  [453]     chrC [24082, 24101]      *
  [454]     chrC [24128, 24147]      *
  [455]     chrC [24178, 24197]      *
  [456]     chrC [24248, 24267]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> ###################################################################################################
> ###################################################################################################
> # Sticking some tests for merging of fixed-size windows with switched fold changes.
> 
> mcomp <- function(tol=1000, ...) {
+ 	stuff<-generateWindows(...)
+ 	posfc<-stuff$tab$logFC>0
+ 	combo<-mergeWindows(stuff$region, tol=tol, sign=posfc)
+ 	merged.ids<-nativemerge(stuff$region, tol=tol, sign=posfc)
+ 	if (!identical(merged.ids, combo$id)) { stop("merging identities failed to match for variable sign") }
+ 
+ 	signs<-split(posfc, merged.ids)
+ 	if (!all(sapply(signs, FUN=function(x) { length(unique(x))==1L }))) {
+ 		stop("not all windows have the same sign") }
+ 	return(combo$region)
+ }
> 
> mcomp(100, chrs=chrs, nwin=200, winsize=1)
GRanges object with 360 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [  6,  71]      *
    [2]     chrA     [ 74,  74]      *
    [3]     chrA     [ 83, 127]      *
    [4]     chrA     [163, 182]      *
    [5]     chrA     [229, 229]      *
    ...      ...            ...    ...
  [356]     chrC [25456, 25608]      *
  [357]     chrC [25831, 25831]      *
  [358]     chrC [26027, 26027]      *
  [359]     chrC [26129, 26129]      *
  [360]     chrC [26249, 26249]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(100, chrs=chrs, nwin=200, winsize=10)
GRanges object with 373 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [ 35,  71]      *
    [2]     chrA     [ 67,  76]      *
    [3]     chrA     [106, 132]      *
    [4]     chrA     [127, 136]      *
    [5]     chrA     [145, 154]      *
    ...      ...            ...    ...
  [369]     chrC [25723, 25732]      *
  [370]     chrC [25756, 25765]      *
  [371]     chrC [25966, 25975]      *
  [372]     chrC [26113, 26215]      *
  [373]     chrC [26419, 26428]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(100, chrs=chrs, nwin=200, winsize=100)
GRanges object with 308 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [ 29, 191]      *
    [2]     chrA     [ 96, 265]      *
    [3]     chrA     [174, 287]      *
    [4]     chrA     [224, 323]      *
    [5]     chrA     [262, 393]      *
    ...      ...            ...    ...
  [304]     chrC [23508, 23837]      *
  [305]     chrC [23896, 23995]      *
  [306]     chrC [24031, 24130]      *
  [307]     chrC [24085, 24191]      *
  [308]     chrC [24130, 24229]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> mcomp(100, chrs=chrs, nwin=500, winsize=1)
GRanges object with 776 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA       [10, 29]      *
    [2]     chrA       [38, 38]      *
    [3]     chrA       [45, 45]      *
    [4]     chrA       [52, 83]      *
    [5]     chrA       [86, 86]      *
    ...      ...            ...    ...
  [772]     chrC [24690, 24819]      *
  [773]     chrC [24832, 24895]      *
  [774]     chrC [24943, 24943]      *
  [775]     chrC [24977, 24977]      *
  [776]     chrC [25063, 25063]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(100, chrs=chrs, nwin=500, winsize=10)
GRanges object with 726 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA       [13, 41]      *
    [2]     chrA       [49, 58]      *
    [3]     chrA       [52, 61]      *
    [4]     chrA       [65, 74]      *
    [5]     chrA       [83, 92]      *
    ...      ...            ...    ...
  [722]     chrC [25480, 25542]      *
  [723]     chrC [25619, 25628]      *
  [724]     chrC [25671, 25761]      *
  [725]     chrC [25785, 25794]      *
  [726]     chrC [25830, 25910]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(100, chrs=chrs, nwin=500, winsize=100)
GRanges object with 735 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [ 14, 162]      *
    [2]     chrA     [ 68, 173]      *
    [3]     chrA     [ 86, 203]      *
    [4]     chrA     [116, 234]      *
    [5]     chrA     [152, 275]      *
    ...      ...            ...    ...
  [731]     chrC [24390, 24489]      *
  [732]     chrC [24397, 24628]      *
  [733]     chrC [24603, 24702]      *
  [734]     chrC [24604, 24703]      *
  [735]     chrC [24646, 24745]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> mcomp(1000, chrs=chrs, nwin=200, winsize=10)
GRanges object with 300 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [ 36, 179]      *
    [2]     chrA     [188, 197]      *
    [3]     chrA     [233, 295]      *
    [4]     chrA     [317, 326]      *
    [5]     chrA     [336, 345]      *
    ...      ...            ...    ...
  [296]     chrC [23593, 23602]      *
  [297]     chrC [23725, 24057]      *
  [298]     chrC [24242, 24251]      *
  [299]     chrC [24362, 24764]      *
  [300]     chrC [24887, 24896]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(1000, chrs=chrs, nwin=500, winsize=10)
GRanges object with 742 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA     [  6,  15]      *
    [2]     chrA     [ 20,  93]      *
    [3]     chrA     [ 86,  95]      *
    [4]     chrA     [100, 109]      *
    [5]     chrA     [111, 120]      *
    ...      ...            ...    ...
  [738]     chrC [25021, 25030]      *
  [739]     chrC [25038, 25047]      *
  [740]     chrC [25048, 25057]      *
  [741]     chrC [25075, 25084]      *
  [742]     chrC [25146, 25155]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> mcomp(1000, chrs=chrs, nwin=600, winsize=10)
GRanges object with 917 ranges and 0 metadata columns:
        seqnames         ranges strand
           <Rle>      <IRanges>  <Rle>
    [1]     chrA       [ 9, 18]      *
    [2]     chrA       [17, 28]      *
    [3]     chrA       [32, 41]      *
    [4]     chrA       [43, 52]      *
    [5]     chrA       [49, 58]      *
    ...      ...            ...    ...
  [913]     chrC [25167, 25247]      *
  [914]     chrC [25295, 25393]      *
  [915]     chrC [25438, 25447]      *
  [916]     chrC [25511, 25594]      *
  [917]     chrC [25605, 25651]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> # Seeing what happens with nested windows of same and opposing sign.
> 
> gr <- GRanges("chrA", IRanges(c(1,1,1), c(100, 30, 50))) # should be okay, start point equality
> x <- mergeWindows(gr, tol=10, sign=c(TRUE, TRUE, TRUE))
> x <- mergeWindows(gr, tol=10, sign=c(TRUE, FALSE, TRUE))
> 
> gr <- GRanges("chrA", IRanges(c(100, 20, 40), c(200, 200, 200))) # should be okay, end point equality
> x <- mergeWindows(gr, tol=10, sign=c(TRUE, TRUE, TRUE))
> x <- mergeWindows(gr, tol=10, sign=c(TRUE, FALSE, TRUE))
> 
> gr <- GRanges("chrA", IRanges(c(1, 3, 50), c(200, 100, 80))) 
> x <- mergeWindows(gr, tol=10, sign=c(TRUE, TRUE, TRUE)) # should be okay
> try(x <- mergeWindows(gr, tol=10, sign=c(TRUE, FALSE, TRUE))) # should fail.
Error in mergeWindows(gr, tol = 10, sign = c(TRUE, FALSE, TRUE)) : 
  fully nested windows of opposite sign are not supported
> gr2 <- GRanges(c("chrA", "chrB", "chrA"), IRanges(c(1, 3, 50), c(200, 100, 80))) 
> x <- mergeWindows(gr2, tol=10, sign=c(TRUE, FALSE, TRUE)) # should be okay again
> 
> # In this case, we should see the use of the larger nested region to match to the nest window,
> # as they should be exactly 99 bp apart.
> gr <- c(gr, GRanges("chrA", IRanges(300, 400)))
> x <- mergeWindows(gr, tol=99)
> stopifnot(length(unique(x$id))==1L)
> x <- mergeWindows(gr, tol=98)
> stopifnot(length(unique(x$id))==2L)
> 
> ###################################################################################################
> ###################################################################################################
> ###################################################################################################
> # Testing the maximum limit.
> 
> maxcomp <- function(tol=1000, maxd=2000, ...) {
+ 	stuff<-generateWindows(...)
+ 	combo<-mergeWindows(stuff$region, tol=tol, max.width=maxd)
+ 	merged.ids<-nativemerge(stuff$region, tol=tol)
+ 
+ 	# Parsing the merged.ids, and splitting them.
+ 	gunk <- split(1:length(merged.ids), merged.ids)
+ 	allstarts <- start(stuff$region)
+ 	allends <- end(stuff$region)
+ 	last.id <- 1L
+ 
+ 	for (x in names(gunk)) {
+ 		ix <- as.integer(x)
+ 		all.dexes <- gunk[[x]]
+ 		curstarts <- allstarts[all.dexes]
+ 		curends <- allends[all.dexes]
+ 		
+ 		full.width <- max(curends)-min(curstarts)+1L
+ 		mult <- round(full.width/maxd)
+ 		subwidth <- full.width/mult
+ 
+ 		mid.dist <- (curstarts + curends)*0.5 - min(curstarts)
+ 		subcluster <- floor(mid.dist / subwidth)
+ 		new.ids <- as.integer(factor(subcluster)) 
+ 
+ 		merged.ids[all.dexes] <- last.id + new.ids - 1L
+ 		last.id <- last.id + max(new.ids)
+ 	}
+ 
+ 	if (!identical(merged.ids, combo$id)) { stop("merging identities failed to match with maximum limit") }
+ 	head(combo$region)
+ }
> 
> maxcomp(100, maxd=500, chrs=chrs, nwin=200, winsize=1)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  40,  508]      *
  [2]     chrA [ 539,  999]      *
  [3]     chrA [1047, 1505]      *
  [4]     chrA [1549, 1997]      *
  [5]     chrA [2025, 2475]      *
  [6]     chrA [2497, 2962]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(100, maxd=500, chrs=chrs, nwin=200, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [   6,  504]      *
  [2]     chrA [ 530, 1013]      *
  [3]     chrA [1023, 1487]      *
  [4]     chrA [1521, 2009]      *
  [5]     chrA [2042, 2516]      *
  [6]     chrA [2532, 3038]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(100, maxd=500, chrs=chrs, nwin=200, winsize=100)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  39,  570]      *
  [2]     chrA [ 516, 1053]      *
  [3]     chrA [ 986, 1533]      *
  [4]     chrA [1459, 1998]      *
  [5]     chrA [1947, 2525]      *
  [6]     chrA [2452, 2995]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> maxcomp(100, maxd=1000, chrs=chrs, nwin=500, winsize=1)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  17, 1025]      *
  [2]     chrA [1033, 2040]      *
  [3]     chrA [2047, 3058]      *
  [4]     chrA [3067, 4067]      *
  [5]     chrA [4085, 5090]      *
  [6]     chrB [   5, 1018]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(100, maxd=1000, chrs=chrs, nwin=500, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [   2, 1045]      *
  [2]     chrA [1053, 2082]      *
  [3]     chrA [2092, 3133]      *
  [4]     chrA [3132, 4174]      *
  [5]     chrA [4176, 5214]      *
  [6]     chrB [   8,  983]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(100, maxd=1000, chrs=chrs, nwin=500, winsize=100)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  12, 1129]      *
  [2]     chrA [1044, 2211]      *
  [3]     chrA [2127, 3283]      *
  [4]     chrA [3197, 4361]      *
  [5]     chrA [4276, 5389]      *
  [6]     chrB [  37, 1055]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> maxcomp(1000, maxd=500, chrs=chrs, nwin=200, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  46,  542]      *
  [2]     chrA [ 563, 1052]      *
  [3]     chrA [1085, 1576]      *
  [4]     chrA [1599, 2085]      *
  [5]     chrA [2108, 2581]      *
  [6]     chrA [2611, 3096]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(1000, maxd=500, chrs=chrs, nwin=500, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  14,  493]      *
  [2]     chrA [ 499,  971]      *
  [3]     chrA [ 979, 1467]      *
  [4]     chrA [1465, 1949]      *
  [5]     chrA [1960, 2438]      *
  [6]     chrA [2442, 2906]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(1000, maxd=500, chrs=chrs, nwin=600, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [   8,  515]      *
  [2]     chrA [ 520, 1014]      *
  [3]     chrA [1020, 1533]      *
  [4]     chrA [1530, 2042]      *
  [5]     chrA [2041, 2547]      *
  [6]     chrA [2553, 3058]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> maxcomp(1000, maxd=2000, chrs=chrs, nwin=200, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  35, 1796]      *
  [2]     chrA [1834, 3510]      *
  [3]     chrA [3550, 5309]      *
  [4]     chrB [  17, 1936]      *
  [5]     chrB [1988, 3848]      *
  [6]     chrB [3904, 5744]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(1000, maxd=2000, chrs=chrs, nwin=500, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [  14, 1684]      *
  [2]     chrA [1693, 3360]      *
  [3]     chrA [3356, 5030]      *
  [4]     chrB [  35, 2051]      *
  [5]     chrB [2069, 4075]      *
  [6]     chrB [4082, 6094]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> maxcomp(1000, maxd=2000, chrs=chrs, nwin=600, winsize=10)
GRanges object with 6 ranges and 0 metadata columns:
      seqnames       ranges strand
         <Rle>    <IRanges>  <Rle>
  [1]     chrA [   1, 2476]      *
  [2]     chrA [2482, 4959]      *
  [3]     chrB [  26, 2086]      *
  [4]     chrB [2097, 4157]      *
  [5]     chrB [4171, 6237]      *
  [6]     chrB [6236, 8307]      *
  -------
  seqinfo: 3 sequences from an unspecified genome; no seqlengths
> 
> ###################################################################################################
> 
> 
> proc.time()
   user  system elapsed 
 15.350   0.149  15.560 
