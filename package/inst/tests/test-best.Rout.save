
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This tests the correctness of the getBestTest function.
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> comp <- function(alpha=1, beta=2, nids=10, max.weight=10) {
+ 	n <- 10000
+     ids<-round(runif(n, 1, nids))
+ 	tab <- data.frame(logFC=rnorm(n), logCPM=rnorm(n), PValue=rbeta(n, alpha, beta))
+ 	best<-getBestTest(ids, tab)
+ 
+ 	ref <- aggregate(tab$PValue ~ ids, FUN=function(x) { min(1, x*length(x)) }, data=NULL)	
+ 	xref <- aggregate(1:n ~ ids, FUN=function(x) { x[which.min(tab$PValue[x])] }, data=NULL)	
+ 	if (any(abs(best$PValue - ref[,2]) > 1e-6 * (ref[,2] + best$PValue)) ||
+ 			!identical(best$best, xref[,2]) ) {
+ 		stop("best p-value doesn't match reference") 
+ 	}
+ 
+ 	# With window weighting.
+ 	w<-round(runif(n, 1, max.weight))
+ 	best<-getBestTest(ids, tab, weight=w)
+ 	ref <- aggregate(1:n ~ ids, FUN=function(x) { min(1, tab$PValue[x]/w[x]*sum(w[x])) }, data=NULL)	
+ 	xref <- aggregate(1:n ~ ids, FUN=function(x) { x[which.min(tab$PValue[x]/w[x])] }, data=NULL)	
+ 	if (any(abs(best$PValue - ref[,2]) > 1e-6 * (ref[,2] + best$PValue)) ||
+ 			!identical(best$best, xref[,2]) ) {
+ 		stop("best p-value doesn't match reference after weighting") 
+ 	}
+ 
+ 	# Now, searching for the max log-CPM.
+ 	almostbest <- getBestTest(ids, tab, by.pval=FALSE)
+     ref <- aggregate(1:n ~ ids, FUN=function(x) { x[which.max(tab$logCPM[x])] }, data=NULL)
+ 	if (!identical(ref[,2], almostbest$best)) { stop("tests with the highest log-CPMs don't match reference") }
+ 	
+ 	return(head(best))	
+ }
> 
> set.seed(3479102)
> options(width=120)
> 
> comp()
  best       logFC      logCPM     PValue       FDR
1  746 -0.54800580 -0.24774490 0.80500348 0.8944483
2 9699 -0.06374903 -0.70343232 0.26237982 0.4574503
3 2328 -0.51025001 -0.91300449 0.13894364 0.4574503
4 8771 -0.96420321  0.09618730 0.07312957 0.4574503
5 2878  0.66697105  0.94206432 0.19128435 0.4574503
6 2827 -0.02627432 -0.02360457 0.31580730 0.4574503
> comp(1,1)
  best       logFC      logCPM PValue FDR
1  333 -1.02308864  0.06412657      1   1
2 5929 -2.27260041  1.25325599      1   1
3 5638  0.34087268 -0.05372618      1   1
4 3753  0.01754206  0.12525410      1   1
5 3140  0.15462266  1.06732270      1   1
6 4082 -1.70228254 -2.42290605      1   1
> comp(1,3)
  best       logFC      logCPM     PValue       FDR
1 9679  0.42040088  0.25395037 0.87848671 0.8784867
2   90 -0.56819097  1.02654773 0.19945123 0.6648374
3 7436  0.01807094 -1.47550703 0.60139164 0.7574883
4 5218 -3.95584570  0.08175477 0.45480158 0.7574883
5 6171  1.41445496 -1.89540036 0.53381035 0.7574883
6 4305 -0.20115730  0.33629501 0.09086183 0.4574250
> comp(1,5)
  best        logFC     logCPM      PValue       FDR
1 2534  0.130309425 -0.6283157 0.145123618 0.2418727
2 1642 -0.354904582 -0.5067609 0.247822827 0.2527344
3 2432 -0.106029935 -1.4425070 0.201098305 0.2527344
4 7128  2.795184729 -0.3292855 0.004217110 0.0218982
5 3670 -1.655746041 -2.8027723 0.007400870 0.0218982
6 3727 -0.003895911  0.2318282 0.007759908 0.0218982
> comp(2,1)
  best      logFC     logCPM PValue FDR
1 8927 -0.9650895  0.8976522      1   1
2 6612  1.9106267 -1.7786713      1   1
3 8194 -1.0450134 -1.1298433      1   1
4 9420 -2.0190381  1.3257772      1   1
5  672  0.9337298  0.5188564      1   1
6  934 -1.4515738  1.3041992      1   1
> comp(2,3)
  best      logFC     logCPM PValue FDR
1 1078 -0.6875163 -1.2882186      1   1
2  506 -1.4071142  0.6645934      1   1
3 8572 -1.6657562 -1.5606010      1   1
4 6069  0.6955473 -1.4314013      1   1
5 4866 -0.2740686  1.0741920      1   1
6 8432  0.3099994 -0.8848298      1   1
> comp(2,5)
  best      logFC     logCPM PValue FDR
1 8893  0.2964117  0.3352440      1   1
2 8804 -1.0410049  0.4291044      1   1
3 6177  1.0951392 -1.0775556      1   1
4 1005 -0.2098697  0.1725480      1   1
5 9396  0.9908581 -0.3939389      1   1
6 3514 -1.0077310  0.8347540      1   1
> 
> comp(nids=1000)
  best      logFC       logCPM     PValue       FDR
1  748  0.7870494  0.108577323 0.65803533 0.8977290
2 3916  0.7142492  0.286722729 0.82785700 1.0000000
3 6491 -1.4946231 -0.441964254 0.03640623 0.4874649
4 8185  0.6941496 -0.137056012 0.42426718 0.7469493
5 1717  1.1316083  0.008972408 1.00000000 1.0000000
6 8899  0.6638941  0.592787632 0.50904441 0.8080070
> comp(1,1, nids=100)
  best      logFC     logCPM    PValue       FDR
1 6121 -2.0234784 -0.4254049 1.0000000 1.0000000
2 5473 -0.9838001  1.5638223 0.1678605 0.7993355
3 7273  0.1027073  0.2237205 1.0000000 1.0000000
4 9482 -0.5001861  0.6462753 1.0000000 1.0000000
5 1921 -0.2243247 -1.3236243 0.5688276 1.0000000
6 7700 -2.2258887  2.2101564 0.3456679 0.9586458
> comp(1,3, nids=1000)
  best      logFC     logCPM    PValue       FDR
1 8230 -1.4187825 -0.5030233 0.9383050 0.9876895
2 6922 -0.6883685 -0.6517577 0.1370245 0.3921613
3 6331  2.0317269 -0.5474095 0.2813732 0.4766101
4 5411 -0.2971587 -0.1739518 0.1682361 0.4153978
5 5028  2.2426348 -0.4655619 0.4245874 0.5840266
6   40 -0.1782674  1.0188755 0.2452787 0.4492220
> comp(1,5, nids=5000)
  best      logFC     logCPM      PValue       FDR
1 7435  0.4657460 -0.6460826 0.001057483 0.1911400
2 6716  0.5653908 -1.1184857 0.078283917 0.2441511
4 2877 -0.7952900 -0.7672604 0.001998058 0.1947019
5 7162  0.6693089 -0.9208140 0.127185881 0.2655920
6 2129  1.9251932 -0.3349149 0.172705813 0.2876714
8  461 -1.8419986 -1.9999643 0.016094528 0.2159349
> comp(2,1, nids=50)
  best      logFC     logCPM PValue FDR
1 6859  0.4310703 -0.5994405      1   1
2 2638 -1.4614036 -1.1439466      1   1
3  806  2.5571779 -0.1844986      1   1
4 7817  2.0728000 -0.6340237      1   1
5 8869 -0.9981451 -1.0896234      1   1
6 8744  1.0871411 -0.2462625      1   1
> comp(2,3, nids=100)
  best       logFC     logCPM PValue FDR
1 4048  0.53621638 -0.7353568      1   1
2 7828 -0.72630323 -0.4827744      1   1
3 7269  0.38073348 -0.3118746      1   1
4 4031 -0.60327578  0.5950728      1   1
5 8302  0.04897177 -0.4925472      1   1
6 4803 -1.98545657  0.0258226      1   1
> comp(2,5, nids=500)
  best      logFC      logCPM    PValue FDR
1 9668 -0.7271843 -0.98011279 0.9181660   1
2 6160  0.7596590 -1.44328508 0.6248771   1
3 8062 -0.2058832 -0.89001027 0.6103466   1
4 4398  0.3970093 -0.04959479 0.5543248   1
5 3949 -1.7043838 -1.82309571 1.0000000   1
6 6281  0.2821316  0.44673056 1.0000000   1
> 
> comp(1,1, nids=1000, max.weight=2)
  best       logFC      logCPM    PValue       FDR
1 3465 -0.11690191  2.02355909 0.6479608 1.0000000
2 8620  0.12439509 -1.79170896 1.0000000 1.0000000
3 2438  1.51092705  0.03368895 0.0947298 0.9746678
4  781 -0.00779893  0.74238452 1.0000000 1.0000000
5 2962 -0.07135541  0.44073045 1.0000000 1.0000000
6 7583  0.57671498  1.40145795 0.4201112 1.0000000
> comp(1,3, nids=1000, max.weight=5)
  best      logFC     logCPM      PValue       FDR
1 9411  2.3892378 -1.4514432 0.150147514 0.4113631
2 8857 -0.1369425  0.6770752 0.517964037 0.6399353
3 7922  1.2262175  2.1985342 0.170202717 0.4259164
4 1672 -1.8619272  1.7231335 0.030059023 0.3495235
5 6899  0.2142407 -0.6447153 0.313464154 0.4884513
6  787  1.1396132  0.1656551 0.002713117 0.2248846
> comp(1,5, nids=5000, max.weight=10)
  best       logFC      logCPM      PValue       FDR
2 2735  1.47060511 -0.03122011 0.016546953 0.2077088
3 5147  0.47462108 -0.24525504 0.205660397 0.3121531
4 5160 -2.41547560 -0.67030390 0.208579332 0.3137399
5 2568 -1.04852444  1.64516940 0.076634231 0.2419739
6  689 -0.01087113  2.80424281 0.196833776 0.3075156
7 2557  1.05674871  0.15926033 0.003700825 0.1811079
> comp(2,1, nids=20, max.weight=20)
  best      logFC      logCPM PValue FDR
1 6759 -0.8386757  0.16098248      1   1
2 8843 -1.5177920 -1.47035917      1   1
3 4294  1.1561175  0.28561580      1   1
4 4247  1.4425549  0.36915717      1   1
5 3845 -1.0262162  1.30627837      1   1
6  518 -0.1650739 -0.09660689      1   1
> comp(2,3, nids=30, max.weight=50)
  best      logFC     logCPM PValue FDR
1 9187  1.0462306 -0.5888211      1   1
2 6324  0.2032722  0.4044913      1   1
3 4720 -0.6013182 -1.6416009      1   1
4 7275  1.7592202  0.3345459      1   1
5 3786  0.9056314  0.2190760      1   1
6 2649 -0.2902255  0.2549882      1   1
> comp(2,5, nids=50, max.weight=100)
  best      logFC      logCPM PValue FDR
1 7239  0.5853759  1.97178302      1   1
2 3549 -0.2046777 -0.08045431      1   1
3 6434 -0.8106948 -0.09983116      1   1
4  695  0.1694166 -0.57606197      1   1
5 5734  0.7339679 -0.60483311      1   1
6 9796  1.6184653  0.15927010      1   1
> 
> ##################################################################
> # Checking for sane behaviour when no IDs are supplied.
> 
> getBestTest(integer(0), data.frame(PValue=numeric(0), logCPM=numeric(0), logFC=numeric(0)), weight=numeric(0))
[1] best   PValue logCPM logFC  FDR   
<0 rows> (or 0-length row.names)
> 
> ##################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
  9.042   0.153   9.229 
