
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tests the behaviour of various functions when supplied with empty inputs.
> 
> suppressPackageStartupMessages(require(csaw))
> 
> empty <- data.frame(logFC=numeric(0), PValue=numeric(0), logCPM=numeric(0))
> getBestTest(integer(0), empty)
[1] best   logFC  PValue logCPM FDR   
<0 rows> (or 0-length row.names)
> getBestTest(integer(0), empty, by.pval=FALSE)
[1] best   logFC  PValue logCPM FDR   
<0 rows> (or 0-length row.names)
> getBestOverlaps(Hits(), empty)
[1] best   logFC  PValue logCPM FDR   
<0 rows> (or 0-length row.names)
> 
> combineTests(integer(0), empty)
[1] nWindows   logFC.up   logFC.down PValue     FDR       
<0 rows> (or 0-length row.names)
> combineOverlaps(Hits(), empty)
[1] nWindows   logFC.up   logFC.down PValue     FDR       
<0 rows> (or 0-length row.names)
> 
> upweightSummit(integer(0), integer(0))
numeric(0)
> summitOverlaps(Hits(), integer(0))
numeric(0)
> 
> findMaxima(GRanges(), range=10, metric=numeric(0))
logical(0)
> 
> bamFile <- system.file("exdata", "rep1.bam", package="csaw")
> profileSites(bamFile, GRanges(), range=20) # NA is correct, as average is undefined
-20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1 
NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 
  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 
NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 
 20 
NaN 
> 
> checkBimodality(bamFile, GRanges())
numeric(0)
> 
> clusterFDR(integer(0), 0.05) # NA is correct, as FDR is undefined.
[1] NaN
> 
> suppressPackageStartupMessages(require(org.Mm.eg.db))
> suppressPackageStartupMessages(require(TxDb.Mmusculus.UCSC.mm10.knownGene))
> detailRanges(GRanges(), orgdb=org.Mm.eg.db, txdb=TxDb.Mmusculus.UCSC.mm10.knownGene) 
$overlap
character(0)

$left
character(0)

$right
character(0)

> 
> out <- regionCounts(bamFile, GRanges())
> out
class: RangedSummarizedExperiment 
dim: 0 1 
metadata(1): final.ext
assays(1): counts
rownames: NULL
rowRanges metadata column names(0):
colnames: NULL
colData names(4): bam.files totals ext param
> 
> getWidths(out)
integer(0)
> 
> asDGEList(out)
An object of class "DGEList"
$counts
     Sample1

$samples
        group lib.size norm.factors
Sample1     1     1349            1

> 
> consolidateSizes(list(out), list(empty)) # No point testing behaviour on empty lists.
$id
$id[[1]]
integer(0)


$region
GRanges object with 0 ranges and 0 metadata columns:
   seqnames    ranges strand
      <Rle> <IRanges>  <Rle>
  -------
  seqinfo: no sequences

$table
[1] nWindows   logFC.up   logFC.down PValue     FDR       
<0 rows> (or 0-length row.names)

> consolidateSizes(list(out), list(empty), region=GRanges())
$id
$id[[1]]
Hits object with 0 hits and 0 metadata columns:
   queryHits subjectHits
   <integer>   <integer>
  -------
  queryLength: 0
  subjectLength: 0


$region
GRanges object with 0 ranges and 0 metadata columns:
   seqnames    ranges strand
      <Rle> <IRanges>  <Rle>
  -------
  seqinfo: no sequences

$table
[1] nWindows   logFC.up   logFC.down PValue     FDR       
<0 rows> (or 0-length row.names)

> 
> reformList(list())
list()
> checkList(list())
character(0)
> 
> makeExtVector(integer(0))
integer(0)
attr(,"final.ext")
[1] NA
attr(,"class")
[1] "extVector"
> 
> normOffsets(out) # 1 is correct, as calcNormFactors() just diverts to that.
[1] 1
> normOffsets(out, type="loess")
     [,1]
> 
> scaledAverage(asDGEList(out))
numeric(0)
> scaledAverage(asDGEList(out), scale=numeric(0))
numeric(0)
> 
> metadata(out)$spacing <- 50 # Converting to a window-based object.
> chrs <- Rsamtools::scanBamHeader(bamFile)[[1]]$targets
> seqinfo(rowRanges(out)) <- Seqinfo(names(chrs), chrs)
> filterWindows(out, out, type="global")
$abundances
numeric(0)

$back.abundances
numeric(0)

$filter
numeric(0)

> filterWindows(out, out, type="local")
$abundances
numeric(0)

$back.abundances
numeric(0)

$filter
numeric(0)

> filterWindows(out, out, type="control", norm.fac=1) # TMM normalization fails for empty DGELists.
$abundances
numeric(0)

$back.abundances
numeric(0)

$filter
numeric(0)

> filterWindows(out, type="proportion")
$abundances
numeric(0)

$filter
numeric(0)

> 
> 
> proc.time()
   user  system elapsed 
 24.334   1.112  29.753 
