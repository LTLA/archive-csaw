
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################
> # This tests the profileSites command, to ensure that it's actually giving proper advice.
> 
> source("simsam.R")
> 
> sdir<-"profile-test"
> dir.create(sdir)
> outfname <- file.path(sdir, "out")
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> 
> comp <- function(nreads, chromos, ext=100, width=200, res=50, weight=TRUE, minq=NA, dedup=FALSE) { 
+ 	# Simulating first.
+ 	bam <- regen(nreads, chromos, outfname)
+ 	windows <- generateWindows(chrs=chromos, winsize=res, nwin=20)
+ 	nwin <- length(windows)
+ 
+ 	# Running profileSites.
+ 	xparam <- readParam(minq=minq, dedup=dedup)
+ 	if (weight) {
+ 		by.win <- regionCounts(bam, windows, ext=ext, param=xparam)
+ 		metric <- rowSums(assay(by.win))
+ 	} else {
+ 		metric <- rep(1, nwin)
+ 	}
+ 	observed <- profileSites(bam, windows, ext=ext, range=width, param=xparam, weight=1/metric)
+ 
+ 	# Running the reference analysis.
+ 	totally <- list()
+ 	for (chr in names(chromos)) {
+ 		out <- extractReads(GRanges(chr, IRanges(1, chromos[[chr]])), bam, param=xparam)
+ 		totally[[chr]] <- suppressWarnings(resize(out, width=ext))
+ 	} 
+ 	totes.prof <- 0
+ 	for (x in 1:nwin) {
+ 		curwin <- windows[x]
+ 		all.reads <- totally[[as.character(seqnames(curwin))]]
+ 		dist.back <- start(all.reads) - end(curwin)
+ 		dist.front <- start(curwin) - end(all.reads)
+ 		totes.prof <- totes.prof + (tabulate(dist.back, nbin=width) + tabulate(dist.front, nbin=width))/metric[x]
+ 	}
+ 
+ 	# Evaluating the two methods.
+ 	reference <- totes.prof/nwin/2
+ 	if (length(reference)!=length(observed)) { stop("vectors are of differing lengths") }
+ 	if (any(abs(reference - observed) > (reference+1e-3)*1e-6)) { stop("coverage profiles don't match up") }
+ 	return(head(observed))
+ }
> 
> ############################################################
> # Fairly hefty simulations are necessary here.
> 
> set.seed(123123)
> nreads <- 5000
> chromos <- c(chrA=10000, chrB=5000)
> comp(nreads, chromos)
[1] 0.005909831 0.010478646 0.008146176 0.006816865 0.006026170 0.006775294
> comp(nreads, chromos, minq=100)
[1] 0.005494294 0.006266461 0.004303008 0.004766722 0.007901754 0.009318739
> comp(nreads, chromos, dedup=TRUE)
[1] 0.007049094 0.005315774 0.004644382 0.007825998 0.005638582 0.003874371
> 
> comp(nreads, chromos, ext=50)
[1] 0.008098821 0.014708147 0.010117722 0.006852453 0.008005498 0.008160691
> comp(nreads, chromos, ext=200)
[1] 0.004209993 0.003612084 0.002992409 0.004193355 0.003739664 0.003971579
> comp(nreads, chromos, width=100)
[1] 0.004766385 0.005351178 0.009147037 0.008001523 0.007159171 0.005834073
> comp(nreads, chromos, width=500)
[1] 0.005480453 0.008373289 0.009135909 0.006101396 0.006915384 0.006783746
> 
> comp(nreads, chromos, res=20)
[1] 0.008204082 0.006538186 0.008142649 0.006979309 0.009013505 0.008585427
> comp(nreads, chromos, res=20, width=100)
[1] 0.009144996 0.006369427 0.009077826 0.009846618 0.008198587 0.010812564
> comp(nreads, chromos, res=100)
[1] 0.005064248 0.006372726 0.005136983 0.004999782 0.004949354 0.004818313
> comp(nreads, chromos, res=100, width=500)
[1] 0.004658521 0.004118996 0.004899059 0.005798381 0.004264706 0.003732676
> 
> comp(nreads, chromos, res=20, weight=FALSE)
[1] 0.4250 0.3500 0.3750 0.5125 0.3500 0.3875
> comp(nreads, chromos, res=100, weight=FALSE)
[1] 0.5125 0.3625 0.4000 0.2625 0.3875 0.4500
> comp(nreads, chromos, weight=FALSE)
[1] 0.3500 0.3875 0.2500 0.3375 0.3750 0.2875
> comp(nreads, chromos, weight=FALSE)
[1] 0.3250 0.4000 0.3000 0.4000 0.3625 0.3375
> 
> ############################################################
> # Cleaning up.
> 
> unlink(sdir, recursive=TRUE)
> 
> ############################################################
> 
> proc.time()
   user  system elapsed 
 18.376   0.176  18.605 
