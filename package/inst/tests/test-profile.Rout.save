
R Under development (unstable) (2014-12-14 r67167) -- "Unsuffered Consequences"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################
> # This tests the profileSites command, to ensure that it's actually giving proper advice.
> 
> source("simsam.R")
> 
> sdir<-"profile-test"
> dir.create(sdir)
> outfname <- file.path(sdir, "out")
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> 
> comp <- function(nreads, chromos, ext=100, width=200, res=50, weight=TRUE, minq=NA, dedup=FALSE, sim.strand=TRUE) { 
+ 	# Simulating first.
+ 	bam <- regen(nreads, chromos, outfname)
+ 	windows <- generateWindows(chrs=chromos, winsize=res, nwin=20)
+ 	nwin <- length(windows)
+ 	if (!sim.strand) { strand(windows) <- sample(c("+", "-", "*"), nwin, replace=TRUE) }
+ 
+ 	# Running profileSites.
+ 	xparam <- readParam(minq=minq, dedup=dedup)
+ 	if (weight) {
+ 		by.win <- regionCounts(bam, windows, ext=ext, param=xparam)
+ 		metric <- rowSums(assay(by.win))
+ 	} else {
+ 		metric <- rep(1, nwin)
+ 	}
+ 	observed <- profileSites(bam, windows, ext=ext, range=width, param=xparam, weight=1/metric) 
+ 
+ 	# Running the reference analysis.
+ 	totally <- list()
+ 	for (chr in names(chromos)) {
+ 		out <- extractReads(GRanges(chr, IRanges(1, chromos[[chr]])), bam, param=xparam)
+ 		out <- suppressWarnings(resize(out, width=ext))
+ 		totally[[chr]] <- coverage(ranges(out), width=chromos[[chr]]) 
+ 	} 
+ 
+ 	relevant.start <- start(windows) - width
+ 	relevant.end <- start(windows) + width
+ 	if (!sim.strand) {
+ 		reverse <- as.logical(strand(windows)=="-")
+ 		relevant.start[reverse] <- end(windows[reverse]) + width # Automatic reversal.
+ 		relevant.end[reverse] <- end(windows[reverse]) - width
+ 	}
+ 	totes.prof <- integer(width*2+1)
+ 	for (x in 1:nwin) {
+ 		curchr <- as.character(seqnames(windows[x]))
+ 		relevant <- relevant.start[x]:relevant.end[x]
+ 		valid <- relevant > 0L & relevant <= chromos[[curchr]]
+ 		totes.prof[valid] <- totes.prof[valid] + as.integer(totally[[curchr]][relevant[valid]])/metric[x]
+ 	}
+ 
+ 	# Evaluating the two methods.
+ 	reference <- totes.prof/nwin
+ 	if (length(reference)!=length(observed)) { stop("vectors are of differing lengths") }
+ 	if (any(abs(reference - observed) > (reference+1e-3)*1e-6)) { stop("coverage profiles don't match up") }
+ 	return(head(observed))
+ }
> 
> ############################################################
> # Fairly hefty simulations are necessary here.
> 
> set.seed(123123)
> nreads <- 5000
> chromos <- c(chrA=10000, chrB=5000)
> comp(nreads, chromos)
     -200      -199      -198      -197      -196      -195 
0.6729732 0.6701077 0.6711941 0.6774352 0.6744970 0.6750951 
> comp(nreads, chromos, minq=100)
     -200      -199      -198      -197      -196      -195 
0.6621841 0.6642388 0.6572727 0.6591104 0.6563624 0.6593301 
> comp(nreads, chromos, dedup=TRUE)
     -200      -199      -198      -197      -196      -195 
0.6399946 0.6389985 0.6377986 0.6396924 0.6404963 0.6381132 
> 
> comp(nreads, chromos, ext=50)
     -200      -199      -198      -197      -196      -195 
0.4922395 0.4911493 0.4923385 0.4884104 0.4936909 0.4945896 
> comp(nreads, chromos, ext=200)
     -200      -199      -198      -197      -196      -195 
0.7410996 0.7436694 0.7438483 0.7460019 0.7473979 0.7489759 
> comp(nreads, chromos, width=100)
     -100       -99       -98       -97       -96       -95 
0.6833187 0.6853190 0.6823009 0.6863808 0.6857329 0.6889577 
> comp(nreads, chromos, width=500)
     -500      -499      -498      -497      -496      -495 
0.5692095 0.5746702 0.5751492 0.5756851 0.5755366 0.5746586 
> 
> comp(nreads, chromos, res=20)
     -200      -199      -198      -197      -196      -195 
0.8225748 0.8232036 0.8231338 0.8241603 0.8248423 0.8265105 
> comp(nreads, chromos, res=20, width=100)
     -100       -99       -98       -97       -96       -95 
0.8687747 0.8700648 0.8660264 0.8714511 0.8674120 0.8645625 
> comp(nreads, chromos, res=100)
     -200      -199      -198      -197      -196      -195 
0.5192391 0.5213136 0.5207227 0.5205697 0.5224694 0.5213434 
> comp(nreads, chromos, res=100, width=500)
     -500      -499      -498      -497      -496      -495 
0.4715682 0.4708349 0.4709286 0.4747789 0.4754010 0.4777541 
> 
> comp(nreads, chromos, res=20, weight=FALSE)
  -200   -199   -198   -197   -196   -195 
34.700 34.825 34.875 34.900 34.950 35.100 
> comp(nreads, chromos, res=100, weight=FALSE)
  -200   -199   -198   -197   -196   -195 
36.300 36.250 36.075 36.075 36.325 36.325 
> comp(nreads, chromos, weight=FALSE)
  -200   -199   -198   -197   -196   -195 
32.925 33.075 33.125 33.325 33.150 33.150 
> comp(nreads, chromos, weight=FALSE)
  -200   -199   -198   -197   -196   -195 
34.650 34.625 34.400 34.325 34.350 34.250 
> 
> comp(nreads, chromos, res=20, sim.strand=FALSE)
     -200      -199      -198      -197      -196      -195 
0.8051357 0.8041238 0.8046621 0.8055796 0.8060276 0.8107401 
> comp(nreads, chromos, res=100, sim.strand=FALSE)
     -200      -199      -198      -197      -196      -195 
0.4707838 0.4703937 0.4711090 0.4737918 0.4741216 0.4765514 
> comp(nreads, chromos, sim.strand=FALSE)
     -200      -199      -198      -197      -196      -195 
0.6991890 0.7007939 0.6966547 0.6972806 0.6985931 0.6996342 
> comp(nreads, chromos, sim.strand=FALSE)
     -200      -199      -198      -197      -196      -195 
0.6364542 0.6369933 0.6374587 0.6336338 0.6323193 0.6319561 
> 
> ############################################################
> # Cleaning up.
> 
> unlink(sdir, recursive=TRUE)
> 
> ############################################################
> 
> proc.time()
   user  system elapsed 
 20.315   0.208  20.526 
