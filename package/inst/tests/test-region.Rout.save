
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This script tests the region-counting capabilities of the 'csaw' package.
> 
> suppressWarnings(suppressPackageStartupMessages(library(csaw)))
> source("simsam.R")
> 
> comp <- function(bamFiles, fraglen=200, right=0, left=0, spacing=20, filter=5, discard=GRanges(), restrict=NULL, forward=NA, final.len=NA) {
+ 	if (length(final.len) && is.na(final.len)) { 
+ 		ext <- rep(fraglen, length.out=length(bamFiles))
+ 	} else {
+ 		ext <- makeExtVector(fraglen, final.len)
+ 	}
+ 
+ 	for (type in 1:3) {
+ 		if (type==1) {
+ 			dedup<- FALSE
+ 			minq <- 0
+ 		} else if (type==2) {
+ 			dedup <- TRUE
+ 			minq <- 0
+ 		} else if (type==3) {
+ 			dedup <- FALSE
+ 			minq <- 100
+ 		}
+ 	
+ 		# We compare windowCounts and regionCounts directly.
+ 		repar <- readParam(discard=discard, restrict=restrict, minq=minq, dedup=dedup, forward=forward)
+ 		x<-windowCounts(bamFiles, ext=ext, width=right+left+1, shift=left, spacing=spacing, 
+ 			filter=filter, param=repar)
+ 		all.regs <- rowRanges(x)
+ 		if (!is.na(forward)) { strand(all.regs) <- "*" }
+ 
+ 		y <- regionCounts(bamFiles, regions=all.regs, ext=ext, param=repar)
+ 		if (!identical(assay(y), assay(x))) { stop("mismatch in count matrices") }
+ 		if (!identical(y$totals, x$totals)) { stop("mismatch in total counts") }
+ 
+ 		# If there's no rescaling, we pick a region in the middle and we check it with extractReads.
+ 		chosen <- round(nrow(x)/2)
+ 		my.reg <- all.regs[chosen]
+ 	
+ 		for (f in 1:length(bamFiles)) {
+ 			collected <- extractReads(bamFiles[f], my.reg, param=repar, ext=ext[f])
+ 			strand(collected) <- "*"
+ 			if (!identical(assay(x)[chosen,f], length(collected))) { 
+ 				stop("mismatch in the number of counts from extractReads")
+ 			}
+ 		}
+ 	}
+ 
+ 	return(head(assay(y)))
+ }
> 
> ###################################################################################################
> # Setting up some variables to do the comparison.
> 
> dir<-"reg-test";
> dir.create(dir);
> 
> set.seed(2123)
> chromos<-c(chrA=10000, chrB=5000)
> 
> # Vanilla comparison.
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, spacing=20)
     [,1] [,2]
[1,]    2    5
[2,]    2    7
[3,]    3    7
[4,]    3    6
[5,]    4    6
[6,]    4    6
> comp(bamFiles, fraglen=200, spacing=50)
     [,1] [,2]
[1,]    1    5
[2,]    3    7
[3,]    5    9
[4,]    6   11
[5,]   10   12
[6,]   11   11
> 
> # More complex with variable fragment lengths.
> 
> comp(bamFiles, fraglen=c(100, 200), spacing=50)
     [,1] [,2]
[1,]    0    5
[2,]    2    7
[3,]    3    9
[4,]    4   11
[5,]    8   12
[6,]    5   11
> comp(bamFiles, fraglen=c(100, 200), spacing=50, final.len=NULL)
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    4    8
[4,]    8    8
[5,]    9   11
[6,]    7    8
> comp(bamFiles, fraglen=c(100, 200), spacing=50, final.len=100)
     [,1] [,2]
[1,]    2    4
[2,]    3    4
[3,]    4    5
[4,]    8    7
[5,]    5    7
[6,]    1    4
> 
> # More complex with right arguments.
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, right=30, spacing=20)
     [,1] [,2]
[1,]    3    4
[2,]    3    4
[3,]    3    4
[4,]    3    4
[5,]    4    3
[6,]    4    4
> comp(bamFiles, fraglen=200, left=5, spacing=25)
     [,1] [,2]
[1,]    3    5
[2,]    3    5
[3,]    3    6
[4,]    4    5
[5,]    6    4
[6,]    6    4
> comp(bamFiles, fraglen=150, right=-10, left=10, spacing=30)
     [,1] [,2]
[1,]    3    4
[2,]    2    5
[3,]    3    3
[4,]    4    4
[5,]    4    3
[6,]    6    4
> 
> # Even more complex, with filtering arguments
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=10)
     [,1] [,2]
[1,]    4    6
[2,]    4    8
[3,]    2    8
[4,]    6    4
[5,]    6    4
[6,]    6    5
> comp(bamFiles, fraglen=200, filter=15)
     [,1] [,2]
[1,]    8    9
[2,]    6   10
[3,]    4   13
[4,]    5   12
[5,]    5   13
[6,]    5   12
> comp(bamFiles, fraglen=200, filter=20)
     [,1] [,2]
[1,]   11    9
[2,]   12   10
[3,]   13    9
[4,]   14    6
[5,]   13    7
[6,]   15    6
> 
> # And again, with a different chromosome set-up.
> 
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100)
     [,1] [,2]
[1,]    6    4
[2,]    7    7
[3,]   10    9
[4,]   10   13
[5,]   10   12
[6,]   12   14
> comp(bamFiles, fraglen=200)
     [,1] [,2]
[1,]   10   11
[2,]   13   13
[3,]   16   16
[4,]   15   19
[5,]   18   19
[6,]   21   21
> 
> comp(bamFiles, fraglen=c(100, 200), spacing=50)
     [,1] [,2]
[1,]    6   11
[2,]   11   20
[3,]   12   21
[4,]   11   23
[5,]   16   27
[6,]   18   26
> comp(bamFiles, fraglen=c(100, 200), spacing=50, final.len=NULL)
     [,1] [,2]
[1,]    8    9
[2,]   14   11
[3,]   16   14
[4,]   23   18
[5,]   24   21
[6,]   24   18
> comp(bamFiles, fraglen=c(100, 200), spacing=50, final.len=100)
     [,1] [,2]
[1,]    6    8
[2,]   11    7
[3,]   12   13
[4,]   11   14
[5,]   16   10
[6,]   18   13
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, right=100)
     [,1] [,2]
[1,]   17   20
[2,]   17   24
[3,]   19   24
[4,]   24   24
[5,]   23   27
[6,]   22   29
> comp(bamFiles, fraglen=200, left=10)
     [,1] [,2]
[1,]   12   14
[2,]   13   20
[3,]   12   20
[4,]   17   22
[5,]   18   23
[6,]   20   24
> comp(bamFiles, fraglen=200, right=-5, left=10, spacing=20)
     [,1] [,2]
[1,]   13   19
[2,]   12   20
[3,]   15   21
[4,]   18   23
[5,]   19   23
[6,]   22   20
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=20)
     [,1] [,2]
[1,]    9   11
[2,]    8   14
[3,]    7   15
[4,]    8   19
[5,]    7   18
[6,]   10   19
> comp(bamFiles, fraglen=200, filter=40)
     [,1] [,2]
[1,]   14   29
[2,]   15   29
[3,]   20   32
[4,]   23   34
[5,]   25   37
[6,]   26   36
> 
> # One more time; sparse across the genome, but three files.
> 
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "C")))
> comp(bamFiles, fraglen=100)
     [,1] [,2] [,3]
[1,]    3    7    5
[2,]    6   10    7
[3,]   10   11    9
[4,]   12   11   12
[5,]   15   10   10
[6,]   16   11   11
> comp(bamFiles, fraglen=200)
     [,1] [,2] [,3]
[1,]   12   13   11
[2,]   13   13   13
[3,]   18   15   14
[4,]   20   18   19
[5,]   20   19   16
[6,]   21   22   14
> 
> comp(bamFiles, fraglen=c(100, 200, 150), spacing=50)
     [,1] [,2] [,3]
[1,]    3   13    7
[2,]   12   16   14
[3,]   16   22   14
[4,]   14   29   16
[5,]   13   37   18
[6,]   16   40   18
> comp(bamFiles, fraglen=c(100, 200, 150), spacing=50, final.len=NULL)
     [,1] [,2] [,3]
[1,]    7   10    7
[2,]   16   11   14
[3,]   20   13   14
[4,]   23   24   16
[5,]   20   27   18
[6,]   25   31   18
> comp(bamFiles, fraglen=c(100, 200, 150), spacing=50, final.len=100)
     [,1] [,2] [,3]
[1,]    3   10    6
[2,]   12    6    8
[3,]   16    8   11
[4,]   14   16   10
[5,]   13   21    9
[6,]   16   21   13
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "C")))
> comp(bamFiles, fraglen=100, left=50, spacing=100)
     [,1] [,2] [,3]
[1,]    2    5    5
[2,]   14   21   18
[3,]   19   22   14
[4,]   21   22   16
[5,]   20   27   16
[6,]   19   25   19
> comp(bamFiles, fraglen=200, right=100, spacing=100)
     [,1] [,2] [,3]
[1,]   23   28   26
[2,]   30   40   32
[3,]   38   52   35
[4,]   34   55   30
[5,]   37   51   36
[6,]   42   46   42
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "C")))
> comp(bamFiles, fraglen=200, filter=10)
     [,1] [,2] [,3]
[1,]   11   20   15
[2,]   14   22   18
[3,]   12   24   18
[4,]   12   27   17
[5,]   14   28   14
[6,]   17   26   16
> comp(bamFiles, fraglen=200, right=50, filter=50)
     [,1] [,2] [,3]
[1,]   16   32   21
[2,]   17   33   21
[3,]   18   32   24
[4,]   19   32   22
[5,]   21   34   21
[6,]   21   31   21
> 
> ###################################################################################################
> # Restricted and/or discarded.
> 
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> 
> bamFiles<-c(regen(100, chromos, file.path(dir, "A")), regen(100, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, discard=makeDiscard(10, 200, chromos))
     [,1] [,2]
[1,]    2    3
[2,]    1    4
> comp(bamFiles, fraglen=200, discard=makeDiscard(20, 100, chromos), restrict="chrA")
     [,1] [,2]
[1,]    3    2
[2,]    4    2
[3,]    3    2
[4,]    3    2
[5,]    3    2
[6,]    2    3
> comp(bamFiles, fraglen=200, right=50, discard=makeDiscard(10, 200, chromos), restrict=c("chrA", "chrB"))
     [,1] [,2]
[1,]    1    4
[2,]    1    5
[3,]    1    5
[4,]    1    5
[5,]    1    5
[6,]    1    4
> 
> bamFiles<-c(regen(100, chromos, file.path(dir, "A")), regen(100, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=200, left=25, spacing=50, discard=makeDiscard(20, 200, chromos))
     [,1] [,2]
[1,]    2    3
[2,]    2    3
[3,]    2    3
[4,]    3    3
[5,]    3    2
[6,]    1    4
> comp(bamFiles, fraglen=200, filter=1, discard=makeDiscard(5, 1000, chromos), restrict=c("chrC", "chrA"))
     [,1] [,2]
[1,]    1    0
[2,]    1    0
[3,]    1    0
[4,]    1    0
[5,]    1    0
[6,]    2    0
> comp(bamFiles, fraglen=200, right=50, filter=2, discard=makeDiscard(20, 100, chromos))
     [,1] [,2]
[1,]    2    0
[2,]    2    0
[3,]    2    0
[4,]    2    0
[5,]    2    0
[6,]    2    0
> 
> bamFiles<-c(regen(100, chromos, file.path(dir, "A")), regen(100, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=2, forward=TRUE)
     [,1] [,2]
[1,]    0    2
[2,]    2    0
[3,]    2    0
[4,]    2    0
[5,]    1    1
[6,]    1    1
> comp(bamFiles, fraglen=100, filter=2, forward=FALSE, discard=makeDiscard(10, 200, chromos))
     [,1] [,2]
[1,]    0    2
[2,]    2    0
[3,]    2    0
[4,]    1    1
[5,]    0    2
[6,]    2    0
> comp(bamFiles, fraglen=200, filter=2, left=20, spacing=50, forward=TRUE)
     [,1] [,2]
[1,]    0    2
[2,]    0    2
[3,]    0    2
[4,]    1    1
[5,]    2    0
[6,]    2    0
> comp(bamFiles, fraglen=200, filter=2, left=20, spacing=50, forward=FALSE, discard=makeDiscard(20, 200, chromos))
     [,1] [,2]
[1,]    2    0
[2,]    0    2
[3,]    0    2
[4,]    0    2
[5,]    1    1
[6,]    2    1
> 
> ###################################################################################################
> # Cleaning up.
> 
> unlink(dir, recursive=TRUE)
> 
> ###################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
 53.588   0.290  53.873 
