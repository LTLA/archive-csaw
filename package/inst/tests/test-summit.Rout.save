
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################
> # This tests the profileSummit command, to ensure that it's actually giving proper advice.
> 
> source("simsam.R")
> 
> sdir<-"summit-test"
> dir.create(sdir)
> outfname <- file.path(sdir, "out")
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> 
> comp <- function(nreads, chromos, ext=100, width=200, res=50, min.depth=20, minq=NA, dedup=FALSE) { 
+ 	# Simulating first.
+ 	bam <- regen(nreads, chromos, outfname)
+ 
+ 	# Running the profileSummits.
+ 	xparam <- readParam(minq=minq, dedup=dedup)
+ 	out <- profileSummit(bam, ext=ext, width=width, res=res, min.depth=min.depth/res, param=xparam)
+ 
+ 	# Running the reference analysis.
+ 	res <- as.integer(res)
+ 	actual.width <- as.integer(width/res)
+ 	min.depth <- as.integer(min.depth)
+ 	profile <- num <- numeric(actual.width)
+ 
+ 	data <- windowCounts(bam, param=xparam, ext=ext, width=res, spacing=res)
+ 	for (x in names(chromos)) {
+ 		nbins <- ceiling(chromos[[x]]/res)
+ 		track <- integer(nbins)
+ 		current <- as.logical(seqnames(rowData(data))==x)
+ 		track[(start(rowData(data))[current] - 1L)/res + 1L] <- assay(data)[current,]
+ 
+ 		# Identifying the local maxima.
+ 		all.max <- list()
+ 		for (y in 1:length(track)) {
+ 			if (track[y]<min.depth) { next }
+ 
+ 			lower <- max(1L, y-actual.width)
+ 			upper <- min(y+actual.width, length(track))
+ 			cur.track <- track[lower:upper]
+ 
+ 			if (sum(cur.track>=track[y])==1L) {
+ 				all.max[[length(all.max)+1L]] <- y
+ 			}
+ 		}
+ 
+ 		# Expanding windows and evaluating.
+ 		for (y in all.max) {
+ 			new.core <- y*res
+ 			new.starts <- new.core - 0:actual.width * res + 1L - res
+ 			no.start <- new.starts <= 0L
+ 			new.ends <- new.core + 0:actual.width*res
+ 			no.end <- new.ends > chromos[[x]]
+ 
+ 			new.ends[no.end] <- chromos[[x]]
+ 			new.starts[no.start] <- 1L
+ 			new.ranges <- GRanges(x, IRanges(new.starts, new.ends))
+ 			datax <- regionCounts(bam, new.ranges, ext=ext, param=xparam)
+ 
+ 			profile <- profile + diff(assay(datax)[,1]) / track[y]
+ 			num <- num + as.integer(!no.start[-1]) + as.integer(!no.end[-1])
+ 		}
+ 	}
+ 
+ 	# Evaluating the two methods.
+ 	reference <- profile/num * 2
+ 	if (length(reference)!=length(out$coverage)) { stop("vectors are of differing lengths") }
+ 	if (!identical(is.na(reference), is.na(out$coverage))) { stop("NA values are not identical") }
+ 	if (any(abs(reference - out$coverage) > (reference+1e-3)*1e-6, na.rm=TRUE)) { stop("summit profiles don't match up") }
+ 	return(head(out$coverage))
+ }
> 
> ############################################################
> # Fairly hefty simulations are necessary here.
> 
> set.seed(123123)
> nreads <- 5000
> chromos <- c(chrA=10000, chrB=5000)
> comp(nreads, chromos)
[1] 0.4858430 0.5231288 0.5384894 0.5579290
> comp(nreads, chromos, minq=100)
[1] 0.4608371 0.4742164 0.5348265 0.4623773
> comp(nreads, chromos, dedup=TRUE)
[1] 0.4573319 0.4969939 0.5114474 0.4977028
> 
> comp(nreads, chromos, ext=50)
[1] 0.6779713 0.7705741 0.7435018 0.7971252
> comp(nreads, chromos, ext=200)
[1] 0.2873130 0.3234234 0.3346975 0.3307213
> comp(nreads, chromos, width=100)
[1] 0.4949278 0.5213461
> comp(nreads, chromos, width=500)
[1] 0.4962550 0.4884257 0.5434046 0.5687783 0.5547329 0.5137830
> 
> comp(nreads, chromos, res=20)
[1] 0.1922560 0.2371673 0.2262184 0.2227005 0.2505638 0.2393974
> comp(nreads, chromos, res=20, width=100)
[1] 0.2113020 0.2402336 0.2842233 0.2699030 0.2898634
> comp(nreads, chromos, res=100)
[1] 0.7838267 0.8573823
> comp(nreads, chromos, res=100, width=500)
[1] 0.7665851 0.8481457 0.7765344 0.8207515 0.8527316
> 
> comp(nreads, chromos, res=20, min.depth=10)
[1] 0.2068337 0.2360644 0.2257977 0.2489543 0.2825685 0.2394976
> comp(nreads, chromos, res=100, min.depth=50)
[1] 0.7601753 0.8552511
> comp(nreads, chromos, min.depth=10)
[1] 0.4975792 0.5127012 0.5408465 0.5424041
> comp(nreads, chromos, min.depth=50)
[1] 0.4797891 0.5474364 0.5657675 0.5155575
> 
> ############################################################
> # Cleaning up.
> 
> unlink(sdir, recursive=TRUE)
> 
> ############################################################
> 
> proc.time()
   user  system elapsed 
 47.326   0.314  47.780 
