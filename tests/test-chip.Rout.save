
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This script tests the ChIP capabilities of the 'csaw' package.
> 
> suppressPackageStartupMessages(library(csaw))
> source("simsam.R")
> 
> # First, we set up some functions to generate some random SAM files.
> 
> regen <- function(nreads, chromos, outfname) {
+ 	pos.chr<-sample(length(chromos), nreads, replace=TRUE)
+ 	pos.pos<-rep(0, nreads)
+ 	str<-rep(0, nreads)
+ 	for (i in 1:length(chromos)) {
+ 		current<-pos.chr==i
+ 		pos.pos[current]<-round(runif(sum(current), 1, chromos[i]))
+ 		str[current]<-(rbinom(sum(current), 1, 0.5)==1);
+ 	}
+ 	simsam(outfname, names(chromos)[pos.chr], pos.pos, str, chromos);
+ }
> 
> expectedRanges <- function(width, offset, spacing, bam.files, restrict=NULL) {
+ 	spacing<-as.integer(spacing)
+ 	width<-as.integer(width)
+ 	offset<-as.integer(offset)
+ 	chrs<-scanBamHeader(bam.files[1])[[1]][[1]]
+ 	output<-list()
+ 	if (!is.null(restrict)) { chrs <- chrs[names(chrs) %in% restrict] }
+ 
+ 	for (x in names(chrs)) {
+ 		multiples<-as.integer((chrs[[x]]-1L)/spacing)
+ 		all.starts<-0:multiples*spacing+1L-offset
+ 		all.ends<-all.starts+width-1L
+ 		all.starts<-pmax(all.starts, 1L)
+ 		all.ends<-pmin(all.ends, chrs[[x]])
+ 
+ 		gr <-GRanges(x, IRanges(all.starts, all.ends))
+ 		keep <- !GenomicRanges::duplicated(gr)
+ 		output[[length(output)+1L]]<- gr[keep]
+ 	}
+ 	output<-suppressWarnings(do.call(c, output))
+ 	return(output)
+ }
> 
> compare2Ranges <- function(left, right) {
+ 	left<-sort(left)
+ 	right<-sort(right)
+ 	if (length(left)!=length(right)) { return(TRUE) }
+ 	if (any(as.character(seqnames(left))!=as.character(seqnames(right))) ||
+ 	    any(start(left)!=start(right)) || any((end(left)!=end(right)))) { return(TRUE); }
+ 	return(FALSE)
+ }
> 
> # We also set up a comparison function between the windowCount function and its countOverlaps equivalent.
> 
> comp <- function(bamFiles, fraglen=200, right=0, left=0, spacing=20, filter=-1, discard=NULL, restrict=NULL) {
+ 	x<-windowCounts(bamFiles, ext=fraglen, width=right+left+1, shift=left, spacing=spacing, filter=filter, 
+ 		discard=discard, restrict=restrict)
+ 
+ 	# Checking with countOverlaps.
+ 	totals<-integer(length(bamFiles))
+ 	out<-matrix(0L, length(x$region), length(bamFiles))
+ 	for (i in 1:length(bamFiles)) {
+         reads <- scanBam(bamFiles[i], param = ScanBamParam(what =c("rname", "strand", "pos", "qwidth")))[[1]]
+ 		read.starts<-ifelse(reads[[2]]=="+", reads[[3]], reads[[3]]+reads[[4]]-fraglen)
+ 		read.ends<-read.starts+fraglen-1L
+ 		frags <- GRanges(reads[[1]], IRanges(read.starts, read.ends))
+ 
+ 		# Discarding. No variable read lengths here, so no need to use alignment width.			
+ 		if (!is.null(discard)) { frags <- frags[!overlapsAny(GRanges(reads[[1]], IRanges(reads[[3]], reads[[4]]+reads[[3]]-1L)), discard, type="within")] }
+ 		if (!is.null(restrict)) { frags <- frags[seqnames(frags) %in% restrict] }
+ 		current<-findOverlaps(x$region, frags)
+ 		out[,i]<-tabulate(queryHits(current), nbins=length(x$region))
+ 		totals[i]<-length(frags)
+ 	}
+ 
+ 	if (!identical(out, x$counts)) { stop("mismatch in count matrices") }
+ 	if (!identical(totals, x$totals)) { stop("mismatch in total counts") }
+ 
+ 	# Checking the filter. We need to do this separately as the check above is not filter-aware.
+     x2<-windowCounts(bamFiles, ext=fraglen, width=right+left+1, shift=left, spacing=spacing, filter=-1, 
+ 			discard=discard, restrict=restrict)
+ 	expected<-expectedRanges(right+left+1L, left, spacing, bamFiles, restrict=restrict)
+ 	if (compare2Ranges(expected, x2$region)) { stop("mismatch in expected and unfiltered regions"); }
+ 
+ 	keep<-rowSums(x2$counts)>=filter
+ 	if (!identical(x$counts, x2$count[keep,])) { stop("mismatch in filtered counts"); }
+ 	if (sum(keep)==0 && length(x$region)==0) { } 
+ 	else if (compare2Ranges(x2$region[keep], x$region)) { stop("mismatch in filtered regions"); }
+ 
+ 	# Checking MAPQ filtering. This example is a bit silly; we make sure nothing survives when we set the filter too high.
+ 	xx<-windowCounts(bamFiles, minq=1000)
+ 	if (!all(xx$totals==0)) { stop("MAPQ filtering failed") }
+ 	return(x$region);
+ }
> 
> # Bin count checker.
> 
> bincomp <- function(bamFiles, binsize=1000L) {
+ 	binsize<-as.integer(binsize+0.5)
+ 	blah<-windowCounts(bamFiles, width=binsize, bin=TRUE)	
+ 	if (!identical(blah$totals, as.integer(colSums(blah$counts)+0.5))) { stop("totals do not match up") }
+ 	expected<-expectedRanges(binsize, 0L, binsize, bamFiles)
+ 	chrs<-scanBamHeader(bamFiles)[[1]][[1]]
+ 
+ 	# Counting reads into bins.
+ 	total.out<-list()
+     for (x in runValue(seqnames(blah$region))){
+     	out<-matrix(0L, ceiling(chrs[[x]]/binsize), length(bamFiles))
+ 		for (i in 1:length(bamFiles)) { 
+ 			reads <- scanBam(bamFiles[i], param = ScanBamParam(what =c("rname", "strand", "pos", "qwidth"),
+ 						which=GRanges(x, IRanges(1, chrs[[x]]))))[[1]]
+ 			pos<-ifelse(reads[[2]]=="+", reads[[3]], reads[[3]]+reads[[4]]-1L)
+ 			pos<-pmin(pos, chrs[[x]])
+ 			out[,i]<-tabulate((pos-1L)/binsize+1L, nbins=nrow(out))
+ 		}
+ 
+ 		keep<-rowSums(out)>0L
+ 		testing<-blah$region[seqnames(blah$region)==x]
+ 		expect<-expected[seqnames(expected)==x]
+ 		if (compare2Ranges(testing, expect[keep])) { 
+ 			stop("bins do not match up after filtering") }
+ 		total.out[[x]]<-out[keep,]
+    	}
+ 	total.out<-do.call(rbind, total.out)
+ 	if (!identical(total.out, blah$counts)) { stop("binned counts do not match up") }
+ 	return(blah$totals)
+ }
> 
> ###################################################################################################
> # Setting up some variables to do the comparison.
> 
> dir<-"chip-test";
> dir.create(dir);
> 
> set.seed(2123)
> chromos<-c(chrA=10000, chrB=5000)
> 
> # Vanilla comparison.
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, spacing=20)
GRanges with 750 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [746]     chrB [4901, 4901]      *
  [747]     chrB [4921, 4921]      *
  [748]     chrB [4941, 4941]      *
  [749]     chrB [4961, 4961]      *
  [750]     chrB [4981, 4981]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> comp(bamFiles, fraglen=200, spacing=50)
GRanges with 300 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,   1]      *
    [2]     chrA   [ 51,  51]      *
    [3]     chrA   [101, 101]      *
    [4]     chrA   [151, 151]      *
    [5]     chrA   [201, 201]      *
    ...      ...          ...    ...
  [296]     chrB [4751, 4751]      *
  [297]     chrB [4801, 4801]      *
  [298]     chrB [4851, 4851]      *
  [299]     chrB [4901, 4901]      *
  [300]     chrB [4951, 4951]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> bincomp(bamFiles, 1000)
[1] 1000 1000
> bincomp(bamFiles, 123)
[1] 1000 1000
> bincomp(bamFiles, 500)
[1] 1000 1000
> 
> # More complex with right arguments.
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, right=30, spacing=20)
GRanges with 750 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  31]      *
    [2]     chrA    [21,  51]      *
    [3]     chrA    [41,  71]      *
    [4]     chrA    [61,  91]      *
    [5]     chrA    [81, 111]      *
    ...      ...          ...    ...
  [746]     chrB [4901, 4931]      *
  [747]     chrB [4921, 4951]      *
  [748]     chrB [4941, 4971]      *
  [749]     chrB [4961, 4991]      *
  [750]     chrB [4981, 5000]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> comp(bamFiles, fraglen=200, left=50, spacing=25)
GRanges with 600 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,   1]      *
    [2]     chrA    [ 1,  26]      *
    [3]     chrA    [ 1,  51]      *
    [4]     chrA    [26,  76]      *
    [5]     chrA    [51, 101]      *
    ...      ...          ...    ...
  [596]     chrB [4826, 4876]      *
  [597]     chrB [4851, 4901]      *
  [598]     chrB [4876, 4926]      *
  [599]     chrB [4901, 4951]      *
  [600]     chrB [4926, 4976]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> comp(bamFiles, fraglen=150, right=10, left=10, spacing=30)
GRanges with 501 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,  11]      *
    [2]     chrA   [ 21,  41]      *
    [3]     chrA   [ 51,  71]      *
    [4]     chrA   [ 81, 101]      *
    [5]     chrA   [111, 131]      *
    ...      ...          ...    ...
  [497]     chrB [4851, 4871]      *
  [498]     chrB [4881, 4901]      *
  [499]     chrB [4911, 4931]      *
  [500]     chrB [4941, 4961]      *
  [501]     chrB [4971, 4991]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> 
> # Even more complex, with filtering arguments
> 
> bamFiles<-c(regen(1000, chromos, file.path(dir, "A")), regen(1000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=5)
GRanges with 739 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 41,  41]      *
    [2]     chrA   [ 61,  61]      *
    [3]     chrA   [ 81,  81]      *
    [4]     chrA   [101, 101]      *
    [5]     chrA   [121, 121]      *
    ...      ...          ...    ...
  [735]     chrB [4901, 4901]      *
  [736]     chrB [4921, 4921]      *
  [737]     chrB [4941, 4941]      *
  [738]     chrB [4961, 4961]      *
  [739]     chrB [4981, 4981]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> comp(bamFiles, fraglen=100, filter=10)
GRanges with 524 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 61,  61]      *
    [2]     chrA   [101, 101]      *
    [3]     chrA   [121, 121]      *
    [4]     chrA   [141, 141]      *
    [5]     chrA   [161, 161]      *
    ...      ...          ...    ...
  [520]     chrB [4901, 4901]      *
  [521]     chrB [4921, 4921]      *
  [522]     chrB [4941, 4941]      *
  [523]     chrB [4961, 4961]      *
  [524]     chrB [4981, 4981]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> comp(bamFiles, fraglen=200, filter=15)
GRanges with 700 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 41,  41]      *
    [2]     chrA   [ 61,  61]      *
    [3]     chrA   [ 81,  81]      *
    [4]     chrA   [101, 101]      *
    [5]     chrA   [121, 121]      *
    ...      ...          ...    ...
  [696]     chrB [4901, 4901]      *
  [697]     chrB [4921, 4921]      *
  [698]     chrB [4941, 4941]      *
  [699]     chrB [4961, 4961]      *
  [700]     chrB [4981, 4981]      *
  ---
  seqlengths:
    chrA  chrB
   10000  5000
> 
> # And again, with a different chromosome set-up.
> 
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> bincomp(bamFiles, 1000)
[1] 3000 3000
> bincomp(bamFiles, 123)
[1] 3000 3000
> bincomp(bamFiles, 500)
[1] 3000 3000
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, right=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1, 101]      *
    [2]     chrA    [21, 121]      *
    [3]     chrA    [41, 141]      *
    [4]     chrA    [61, 161]      *
    [5]     chrA    [81, 181]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 8000]      *
  [897]     chrC [7921, 8000]      *
  [898]     chrC [7941, 8000]      *
  [899]     chrC [7961, 8000]      *
  [900]     chrC [7981, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, left=50)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [ 1, 21]      *
    [3]     chrA     [ 1, 41]      *
    [4]     chrA     [11, 61]      *
    [5]     chrA     [31, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7851, 7901]      *
  [897]     chrC [7871, 7921]      *
  [898]     chrC [7891, 7941]      *
  [899]     chrC [7911, 7961]      *
  [900]     chrC [7931, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=0, spacing=20)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, left=100, spacing=100)
GRanges with 180 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,   1]      *
    [2]     chrA   [  1, 101]      *
    [3]     chrA   [101, 201]      *
    [4]     chrA   [201, 301]      *
    [5]     chrA   [301, 401]      *
    ...      ...          ...    ...
  [176]     chrC [7401, 7501]      *
  [177]     chrC [7501, 7601]      *
  [178]     chrC [7601, 7701]      *
  [179]     chrC [7701, 7801]      *
  [180]     chrC [7801, 7901]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=20)
GRanges with 844 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 21,  21]      *
    [2]     chrA   [ 41,  41]      *
    [3]     chrA   [ 61,  61]      *
    [4]     chrA   [ 81,  81]      *
    [5]     chrA   [101, 101]      *
    ...      ...          ...    ...
  [840]     chrC [7821, 7821]      *
  [841]     chrC [7841, 7841]      *
  [842]     chrC [7861, 7861]      *
  [843]     chrC [7901, 7901]      *
  [844]     chrC [7921, 7921]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=40)
GRanges with 860 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 21,  21]      *
    [2]     chrA   [ 41,  41]      *
    [3]     chrA   [ 61,  61]      *
    [4]     chrA   [ 81,  81]      *
    [5]     chrA   [101, 101]      *
    ...      ...          ...    ...
  [856]     chrC [7761, 7761]      *
  [857]     chrC [7781, 7781]      *
  [858]     chrC [7801, 7801]      *
  [859]     chrC [7821, 7821]      *
  [860]     chrC [7841, 7841]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=60)
GRanges with 512 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [141, 141]      *
    [2]     chrA   [161, 161]      *
    [3]     chrA   [181, 181]      *
    [4]     chrA   [201, 201]      *
    [5]     chrA   [221, 221]      *
    ...      ...          ...    ...
  [508]     chrC [7181, 7181]      *
  [509]     chrC [7201, 7201]      *
  [510]     chrC [7221, 7221]      *
  [511]     chrC [7241, 7241]      *
  [512]     chrC [7261, 7261]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> # One more time; sparse across the genome, but three files.
> 
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> bincomp(bamFiles, 1000)
[1] 3000 3000 3000
> bincomp(bamFiles, 123)
[1] 3000 3000 3000
> bincomp(bamFiles, 500)
[1] 3000 3000 3000
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, left=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA      [1,  1]      *
    [2]     chrA      [1, 21]      *
    [3]     chrA      [1, 41]      *
    [4]     chrA      [1, 61]      *
    [5]     chrA      [1, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7801, 7901]      *
  [897]     chrC [7821, 7921]      *
  [898]     chrC [7841, 7941]      *
  [899]     chrC [7861, 7961]      *
  [900]     chrC [7881, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=50)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  51]      *
    [2]     chrA    [21,  71]      *
    [3]     chrA    [41,  91]      *
    [4]     chrA    [61, 111]      *
    [5]     chrA    [81, 131]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7951]      *
  [897]     chrC [7921, 7971]      *
  [898]     chrC [7941, 7991]      *
  [899]     chrC [7961, 8000]      *
  [900]     chrC [7981, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, left=0, spacing=50)
GRanges with 360 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,   1]      *
    [2]     chrA   [ 51,  51]      *
    [3]     chrA   [101, 101]      *
    [4]     chrA   [151, 151]      *
    [5]     chrA   [201, 201]      *
    ...      ...          ...    ...
  [356]     chrC [7751, 7751]      *
  [357]     chrC [7801, 7801]      *
  [358]     chrC [7851, 7851]      *
  [359]     chrC [7901, 7901]      *
  [360]     chrC [7951, 7951]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=100, spacing=100)
GRanges with 180 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1, 101]      *
    [2]     chrA   [101, 201]      *
    [3]     chrA   [201, 301]      *
    [4]     chrA   [301, 401]      *
    [5]     chrA   [401, 501]      *
    ...      ...          ...    ...
  [176]     chrC [7501, 7601]      *
  [177]     chrC [7601, 7701]      *
  [178]     chrC [7701, 7801]      *
  [179]     chrC [7801, 7901]      *
  [180]     chrC [7901, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, filter=0)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=1)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=50, filter=2)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  51]      *
    [2]     chrA    [21,  71]      *
    [3]     chrA    [41,  91]      *
    [4]     chrA    [61, 111]      *
    [5]     chrA    [81, 131]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7951]      *
  [897]     chrC [7921, 7971]      *
  [898]     chrC [7941, 7991]      *
  [899]     chrC [7961, 8000]      *
  [900]     chrC [7981, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> ###################################################################################################
> # We test with four files. Oh, the humanity.
> 
> bamFiles<-sapply(1:4, FUN=function(i) { regen(3000, chromos, file.path(dir, paste("A", i, sep=""))) })
> comp(bamFiles, fraglen=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> bincomp(bamFiles, 1000)
[1] 3000 3000 3000 3000
> bincomp(bamFiles, 123)
[1] 3000 3000 3000 3000
> bincomp(bamFiles, 500)
[1] 3000 3000 3000 3000
> 
> bamFiles<-sapply(1:4, FUN=function(i) { regen(3000, chromos, file.path(dir, paste("A", i, sep=""))) })
> comp(bamFiles, fraglen=100, right=100)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1, 101]      *
    [2]     chrA    [21, 121]      *
    [3]     chrA    [41, 141]      *
    [4]     chrA    [61, 161]      *
    [5]     chrA    [81, 181]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 8000]      *
  [897]     chrC [7921, 8000]      *
  [898]     chrC [7941, 8000]      *
  [899]     chrC [7961, 8000]      *
  [900]     chrC [7981, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=50)
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  51]      *
    [2]     chrA    [21,  71]      *
    [3]     chrA    [41,  91]      *
    [4]     chrA    [61, 111]      *
    [5]     chrA    [81, 131]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7951]      *
  [897]     chrC [7921, 7971]      *
  [898]     chrC [7941, 7991]      *
  [899]     chrC [7961, 8000]      *
  [900]     chrC [7981, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=0, spacing=40)
GRanges with 450 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,   1]      *
    [2]     chrA   [ 41,  41]      *
    [3]     chrA   [ 81,  81]      *
    [4]     chrA   [121, 121]      *
    [5]     chrA   [161, 161]      *
    ...      ...          ...    ...
  [446]     chrC [7801, 7801]      *
  [447]     chrC [7841, 7841]      *
  [448]     chrC [7881, 7881]      *
  [449]     chrC [7921, 7921]      *
  [450]     chrC [7961, 7961]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=100, spacing=100)
GRanges with 180 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1, 101]      *
    [2]     chrA   [101, 201]      *
    [3]     chrA   [201, 301]      *
    [4]     chrA   [301, 401]      *
    [5]     chrA   [401, 501]      *
    ...      ...          ...    ...
  [176]     chrC [7501, 7601]      *
  [177]     chrC [7601, 7701]      *
  [178]     chrC [7701, 7801]      *
  [179]     chrC [7801, 7901]      *
  [180]     chrC [7901, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=100)
GRanges with 686 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [ 41,  41]      *
    [2]     chrA   [ 61,  61]      *
    [3]     chrA   [ 81,  81]      *
    [4]     chrA   [101, 101]      *
    [5]     chrA   [121, 121]      *
    ...      ...          ...    ...
  [682]     chrC [7521, 7521]      *
  [683]     chrC [7541, 7541]      *
  [684]     chrC [7561, 7561]      *
  [685]     chrC [7781, 7781]      *
  [686]     chrC [7801, 7801]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=150)
GRanges with 360 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [161, 161]      *
    [2]     chrA   [181, 181]      *
    [3]     chrA   [201, 201]      *
    [4]     chrA   [221, 221]      *
    [5]     chrA   [241, 241]      *
    ...      ...          ...    ...
  [356]     chrB [4741, 4741]      *
  [357]     chrB [4761, 4761]      *
  [358]     chrB [4781, 4781]      *
  [359]     chrB [4801, 4801]      *
  [360]     chrB [4821, 4821]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> ###################################################################################################
> # We try to do some crazy spacing and some crazy extension. We should see 1 combination per chromosome, consisting of all reads.
> 
> chromos<-c(chrA=8000, chrB=8000)
> bamFiles<-c(regen(3000, chromos, file.path(dir, "A")), regen(3000, chromos, file.path(dir, "B")))
> comp(bamFiles, spacing=max(chromos))
GRanges with 2 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrA    [1, 1]      *
  [2]     chrB    [1, 1]      *
  ---
  seqlengths:
   chrA chrB
   8000 8000
> comp(bamFiles, right=max(chromos), left=max(chromos))
GRanges with 2 ranges and 0 metadata columns:
      seqnames    ranges strand
         <Rle> <IRanges>  <Rle>
  [1]     chrA [1, 8000]      *
  [2]     chrB [1, 8000]      *
  ---
  seqlengths:
   chrA chrB
   8000 8000
> 
> ###################################################################################################
> # Restricted and/or discarded.
> 
> makeDiscard <- function(ndisc, sizeof) {
+ 	chosen <- sample(length(chromos), ndisc, replace=T)
+ 	chosen.pos <- runif(ndisc, 1, chromos[chosen]-sizeof)
+ 	reduce(GRanges(names(chromos)[chosen], IRanges(chosen.pos, chosen.pos+sizeof)))
+ }
> chromos<-c(chrA=5000, chrB=5000, chrC=8000)
> 
> bamFiles<-c(regen(100, chromos, file.path(dir, "A")), regen(100, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=100, discard=makeDiscard(10, 200))
Loading required package: GenomicAlignments
Loading required package: BSgenome
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, discard=makeDiscard(20, 100), restrict="chrA")
GRanges with 250 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [246]     chrA [4901, 4901]      *
  [247]     chrA [4921, 4921]      *
  [248]     chrA [4941, 4941]      *
  [249]     chrA [4961, 4961]      *
  [250]     chrA [4981, 4981]      *
  ---
  seqlengths:
   chrA
   5000
> comp(bamFiles, fraglen=100, left=100, discard=makeDiscard(50, 20))
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA      [1,  1]      *
    [2]     chrA      [1, 21]      *
    [3]     chrA      [1, 41]      *
    [4]     chrA      [1, 61]      *
    [5]     chrA      [1, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7801, 7901]      *
  [897]     chrC [7821, 7921]      *
  [898]     chrC [7841, 7941]      *
  [899]     chrC [7861, 7961]      *
  [900]     chrC [7881, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=50, discard=makeDiscard(10, 200), restrict=c("chrA", "chrB"))
GRanges with 500 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  51]      *
    [2]     chrA    [21,  71]      *
    [3]     chrA    [41,  91]      *
    [4]     chrA    [61, 111]      *
    [5]     chrA    [81, 131]      *
    ...      ...          ...    ...
  [496]     chrB [4901, 4951]      *
  [497]     chrB [4921, 4971]      *
  [498]     chrB [4941, 4991]      *
  [499]     chrB [4961, 5000]      *
  [500]     chrB [4981, 5000]      *
  ---
  seqlengths:
   chrA chrB
   5000 5000
> 
> bamFiles<-c(regen(100, chromos, file.path(dir, "A")), regen(100, chromos, file.path(dir, "B")))
> comp(bamFiles, fraglen=200, left=0, spacing=50, discard=makeDiscard(20, 200))
GRanges with 360 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1,   1]      *
    [2]     chrA   [ 51,  51]      *
    [3]     chrA   [101, 101]      *
    [4]     chrA   [151, 151]      *
    [5]     chrA   [201, 201]      *
    ...      ...          ...    ...
  [356]     chrC [7751, 7751]      *
  [357]     chrC [7801, 7801]      *
  [358]     chrC [7851, 7851]      *
  [359]     chrC [7901, 7901]      *
  [360]     chrC [7951, 7951]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, right=100, spacing=100, discard=makeDiscard(10, 1000))
GRanges with 180 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA   [  1, 101]      *
    [2]     chrA   [101, 201]      *
    [3]     chrA   [201, 301]      *
    [4]     chrA   [301, 401]      *
    [5]     chrA   [401, 501]      *
    ...      ...          ...    ...
  [176]     chrC [7501, 7601]      *
  [177]     chrC [7601, 7701]      *
  [178]     chrC [7701, 7801]      *
  [179]     chrC [7801, 7901]      *
  [180]     chrC [7901, 8000]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=100, filter=0, discard=makeDiscard(10, 500))
GRanges with 900 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [896]     chrC [7901, 7901]      *
  [897]     chrC [7921, 7921]      *
  [898]     chrC [7941, 7941]      *
  [899]     chrC [7961, 7961]      *
  [900]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> comp(bamFiles, fraglen=200, filter=1, discard=makeDiscard(5, 1000), restrict=c("chrC", "chrA"))
GRanges with 471 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA     [ 1,  1]      *
    [2]     chrA     [21, 21]      *
    [3]     chrA     [41, 41]      *
    [4]     chrA     [61, 61]      *
    [5]     chrA     [81, 81]      *
    ...      ...          ...    ...
  [467]     chrC [7901, 7901]      *
  [468]     chrC [7921, 7921]      *
  [469]     chrC [7941, 7941]      *
  [470]     chrC [7961, 7961]      *
  [471]     chrC [7981, 7981]      *
  ---
  seqlengths:
   chrA chrC
   5000 8000
> comp(bamFiles, fraglen=200, right=50, filter=2, discard=makeDiscard(20, 100))
GRanges with 634 ranges and 0 metadata columns:
        seqnames       ranges strand
           <Rle>    <IRanges>  <Rle>
    [1]     chrA    [ 1,  51]      *
    [2]     chrA    [21,  71]      *
    [3]     chrA    [41,  91]      *
    [4]     chrA    [61, 111]      *
    [5]     chrA    [81, 131]      *
    ...      ...          ...    ...
  [630]     chrC [7841, 7891]      *
  [631]     chrC [7861, 7911]      *
  [632]     chrC [7881, 7931]      *
  [633]     chrC [7901, 7951]      *
  [634]     chrC [7921, 7971]      *
  ---
  seqlengths:
   chrA chrB chrC
   5000 5000 8000
> 
> ###################################################################################################
> # Cleaning up.
> 
> unlink(dir, recursive=TRUE)
> 
> ###################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
 76.301   0.324  76.823 
