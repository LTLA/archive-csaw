
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This script tests the PET-analysis capabilities of the 'csaw' package.
> 
> suppressPackageStartupMessages(library(csaw))
> 
> source("simsam.R")
> dir<-"pet-test"
> dir.create(dir)
Warning message:
In dir.create(dir) : 'pet-test' already exists
> 
> makeDiscard <- function(ndisc, sizeof, chromos) {
+     chosen <- sample(length(chromos), ndisc, replace=T)
+ 	chosen.pos <- runif(ndisc, 1, chromos[chosen]-sizeof)
+ 	reduce(GRanges(names(chromos)[chosen], IRanges(chosen.pos, chosen.pos+sizeof)))
+ }
> 
> 
> checkcount<-function (npairs, nsingles, chromosomes, spacing=50, max.frag=500, left=0, right=0, filter=-1, ext=100) {
+ 	stuff<-file.path(dir, paste("x", 1:2, sep=""))
+ 	firsts <- seconds <- singles <- list()
+ 	rlen <- 10L
+ 	storage.mode(chromosomes) <- "integer"
+ 
+ 	for (x in 1:length(stuff)) {
+     	# Seeding all reads.
+ 		names<-paste('x', rep(1:npairs, 2), sep=".");
+ 		chrs<-sample(length(chromosomes), length(names), replace=TRUE)
+ 		pos<-rep(0, length(names));
+ 
+ 		# Assigning positions to all of them.
+ 		for (i in 1:length(chromosomes)) {
+ 			current<-chrs==i;
+ 			pos[current]<-round(runif(sum(current), 1, chromosomes[i]))
+ 		}
+ 
+     	# Throwing them into the SAM file generator. 
+ 		str<-rbinom(npairs*2, 1, 0.5)==1L 
+ 		reversi<-c(1:npairs+npairs, 1:npairs)
+ 		mapq <- as.integer(runif(npairs*2, 50, 199))
+ 		dup <- rbinom(npairs*2, 1, 0.8)==0L
+ 		current.chrs <- names(chromosomes)[chrs]
+ 		out<-simsam(stuff[x], current.chrs, pos, str, chromosomes, names=names, 
+ 				is.first=c(rep(TRUE, npairs), rep(FALSE, npairs)), is.paired=TRUE, 
+ 				mate.chr=names(chromosomes)[chrs][reversi], mate.pos=pos[reversi], 
+ 				mate.str=str[reversi], len=rlen, mapq=mapq, is.dup=dup)
+ 
+ 		everything <- GRanges(current.chrs, IRanges(pos, pos+rlen-1), strand=!str)
+ 		everything$mapq <- mapq
+ 		everything$dup <- dup
+ 		firsts[[x]] <- everything[1:npairs]
+ 		seconds[[x]] <- everything[1:npairs + npairs]
+ 
+ 		# Adding singles.
+ 		if (nsingles) {
+ 			snames <- paste('y', 1:nsingles, sep=".")
+             schrs <- sample(length(chromosomes), nsingles, replace=TRUE)
+ 		    spos <- numeric(nsingles)
+ 		    for (i in 1:length(chromosomes)) {
+ 				scurrent<-schrs==i;
+ 				spos[scurrent]<-round(runif(sum(scurrent), 1, chromosomes[i]))
+ 			}
+ 			sstr<-rnbinom(nsingles, 1, 0.5)==1L
+ 				
+ 			mapq <- as.integer(runif(nsingles, 50, 199))
+ 			dup <- rbinom(nsingles, 1, 0.8)==0L
+ 			single.chrs <- names(chromosomes)[schrs]
+ 			singles[[x]] <- GRanges(single.chrs, IRanges(spos, spos+rlen-1L), strand=!sstr)
+ 			singles[[x]]$mapq <- mapq
+ 			singles[[x]]$dup <- dup
+ 			
+ 			tempname<-file.path(dir, "temp")
+ 			out2<-simsam(tempname, single.chrs, spos, sstr, chromosomes, names=snames, len=rlen, mapq=mapq, is.dup=dup)
+ 			more.temp<-file.path(dir, "temp2")
+ 			file.rename(out, more.temp)
+ 			out<-mergeBam(c(more.temp, out2), out, indexDestination=TRUE, overwrite=TRUE)
+ 		}
+ 	}
+ 	
+ 	# Looping through a number of possible filters.
+ 	discard <- restrict <- NULL
+ 	fnames <- paste0(stuff, ".bam")
+ 	for (filter in 1:4) {
+ 		if (filter==1L) {
+ 			dedup <- TRUE
+ 			minq <- 100L
+ 		} else if (filter==2L) {
+ 			dedup <- FALSE
+ 			minq <- 0L
+ 		} else if (filter==3L) {
+ 			discard <- makeDiscard(10, 50, chromosomes)
+ 		} else {
+ 			discard <- NULL
+ 			restrict <- "chrA"
+ 		}
+ 
+     	# Looping through a number of possible extraction scenarios.
+ 		for (mode in 1:3) {
+ 			if (mode==1L) {
+ 				rescue <- FALSE
+ 				pet <- "both"
+ 			} else if (mode==2L) {
+ 				rescue <- TRUE
+ 			} else if (mode==3L) {
+ 				pet <- "first"
+ 			}
+ 			x <- windowCounts(fnames, spacing=spacing, max.frag=max.frag, shift=left, width=right+left+1, pet=pet,
+ 				filter=0, rescue.pairs=rescue, ext=ext, discard=discard, minq=minq, dedup=dedup, restrict=restrict)
+ 			counts <- matrix(0L, nrow=length(x$region), ncol=length(fnames))
+ 			totals <- integer(length(fnames))
+ 
+ 			for (lib in 1:length(fnames)) { 
+ 				pos1 <- start(firsts[[lib]])
+ 				chr1 <- as.character(seqnames(firsts[[lib]]))
+ 				str1 <- as.logical(strand(firsts[[lib]])=="+")
+ 				pos2 <- start(seconds[[lib]])
+ 				chr2 <- as.character(seqnames(seconds[[lib]]))
+ 				str2 <- as.logical(strand(seconds[[lib]])=="+")
+ 
+ 				valid <- chr1==chr2 & str1!=str2 & ifelse(str1, pos1 <= pos2, pos2 <= pos1)
+ 		   		pos1[!str1] <- pmin(pos1[!str1]+rlen, chromosomes[chr1][!str1]+1L)
+ 				pos2[!str2] <- pmin(pos2[!str2]+rlen, chromosomes[chr2][!str2]+1L)
+    				sizes<-abs(pos1-pos2)
+ 
+ 				# Checking which ones are lost.
+ 				keep1 <- (!dedup | !firsts[[lib]]$dup) & firsts[[lib]]$mapq >= minq
+ 				keep2 <- (!dedup | !seconds[[lib]]$dup) & seconds[[lib]]$mapq >= minq
+ 				if (!is.null(discard)) { 
+ 					keep1 <- keep1 & !overlapsAny(firsts[[lib]], discard, type="within")
+ 					keep2 <- keep2 & !overlapsAny(seconds[[lib]], discard, type="within")
+ 				} 
+ 				if (!is.null(restrict)) { 
+ 					keep1 <- keep1 & chr1 %in% restrict
+ 					keep2 <- keep2 & chr2 %in% restrict
+ 				}
+ 				paired <- keep1 & keep2
+ 
+ 				# Checking singles.
+ 				if (nsingles) {
+ 					skeep <- (!dedup | !singles[[lib]]$dup) & singles[[lib]]$mapq >= minq
+ 					if (!is.null(discard)) { skeep <- skeep & !overlapsAny(singles[[lib]], discard, type="within") } 
+ 					if (!is.null(restrict)) { skeep <- skeep & as.character(seqnames(singles[[lib]])) %in% restrict }
+ 				} else { 
+ 					skeep <- NULL 
+ 				}
+ 	
+ 				###############################################
+ 				# Checking diagnostics.
+ 				if (mode==1L) { 
+ 		        	stuff<-getPETSizes(fnames[lib], minq=minq, dedup=dedup, restrict=restrict, discard=discard)
+ 					if (stuff$diagnostics[["single"]]!=sum(skeep)) { 
+ 						stop("mismatch in number of singles")
+ 					} else if (stuff$diagnostics[["total"]]!=sum(keep1)+sum(keep2)+sum(skeep)) {
+ 						stop("mismatch in total number of reads")
+ 					} 
+ 			        if (sum(paired & chr1!=chr2)!=stuff$diagnostics[["inter.chr"]]) { stop("mismatch in interchromosomal PETs") }
+ 			        if (sum(paired & chr1==chr2 & !valid)!=stuff$diagnostics[["unoriented"]]) { stop("mismatch in invalid numbers") }
+ 			        if (sum(keep1!=keep2)!=stuff$diagnostics[["mate.unmapped"]]) { stop("mismatch in unmapped numbers") }
+ 			        if (!identical(sort(sizes[valid&paired]), sort(stuff$sizes))) { stop("mismatch in sizes"); }
+ 					if (lib==1L) { print(stuff$diagnostics) }
+ 				}
+ 				
+ 				###############################################		
+ 				# Now, counting; going through and seeing up the valid paired ones.
+ 
+ 				leftpos <- pmin(pos1, pos2)
+ 				valid <- valid & sizes <= max.frag
+ 				if (pet=="both") {
+ 					pairedness <- GRanges(chr1, IRanges(leftpos, leftpos+sizes-1))[valid & paired]
+ 					if (rescue) {
+ 						# We pick the first if the second is inactive, if paired but interchromosomal, or if paired and intrachromosomal
+ 						# and otherwise invalid and has higher mapping quality.
+ 						better <- firsts[[lib]]$mapq > seconds[[lib]]$mapq
+ 						fcopy <- resize(firsts[[lib]][keep1 & (!keep2 | chr1!=chr2 | (!valid & better))], width=ext)
+ 						fcopy$mapq <- fcopy$dup <- NULL
+ 						scopy <- resize(seconds[[lib]][keep2 & (!keep1 | chr1!=chr2 | (!valid & !better))], width=ext)
+ 						scopy$mapq <- scopy$dup <- NULL
+ 						pairedness <- c(pairedness, fcopy, scopy)
+ 					}
+ 				} else {
+ 					pairedness <- resize(firsts[[lib]][keep1], width=ext)
+ 				}
+ 				counts[,lib] <- countOverlaps(x$region, pairedness)
+ 				totals[lib] <- length(pairedness)					
+ 			}
+ #			print(c(totals, x$totals))
+ #			print(which(counts!=x$counts))
+ #			print(is.integer(counts))
+ #			print(is.integer(x$counts))
+ #			print(head(counts))
+ #			print(head(x$counts))
+ 			if (!identical(counts, x$counts)) { stop('mismatches in counts for paired data') }
+ 			if (!identical(totals, x$totals)) { stop("mismatches in totals for paired data") }
+ 		}
+ 	}
+ 	return(x$region)
+ }
> 
> # Running through a bunch of tests.
> 
> set.seed(3429201)
> checkcount(1000, 50, c(chrA=1000, chrB=2000), spacing=20)
        total        single    unoriented mate.unmapped     inter.chr 
         1088            24           109           506           134 
        total        single    unoriented mate.unmapped     inter.chr 
         2050            50           357             0           506 
Loading required package: GenomicAlignments
Loading required package: BSgenome
        total        single    unoriented mate.unmapped     inter.chr 
         1839            45           292           182           400 
        total        single    unoriented mate.unmapped     inter.chr 
         1020            24           182           506             0 
GRanges with 50 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA   [ 1,  1]      *
   [2]     chrA   [21, 21]      *
   [3]     chrA   [41, 41]      *
   [4]     chrA   [61, 61]      *
   [5]     chrA   [81, 81]      *
   ...      ...        ...    ...
  [46]     chrA [901, 901]      *
  [47]     chrA [921, 921]      *
  [48]     chrA [941, 941]      *
  [49]     chrA [961, 961]      *
  [50]     chrA [981, 981]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(2000, 0, c(chrA=1000, chrB=2000), spacing=50)
        total        single    unoriented mate.unmapped     inter.chr 
         2150             0           202          1012           283 
        total        single    unoriented mate.unmapped     inter.chr 
         4000             0           732             0          1008 
        total        single    unoriented mate.unmapped     inter.chr 
         3415             0           550           515           714 
        total        single    unoriented mate.unmapped     inter.chr 
         1978             0           361          1008             0 
GRanges with 20 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 51,  51]      *
   [3]     chrA [101, 101]      *
   [4]     chrA [151, 151]      *
   [5]     chrA [201, 201]      *
   ...      ...        ...    ...
  [16]     chrA [751, 751]      *
  [17]     chrA [801, 801]      *
  [18]     chrA [851, 851]      *
  [19]     chrA [901, 901]      *
  [20]     chrA [951, 951]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(5000, 25, c(chrA=1000, chrB=2000), spacing=25)
        total        single    unoriented mate.unmapped     inter.chr 
         5333            12           509          2465           732 
        total        single    unoriented mate.unmapped     inter.chr 
        10025            25          1816             0          2537 
        total        single    unoriented mate.unmapped     inter.chr 
         8831            23          1397          1056          1957 
        total        single    unoriented mate.unmapped     inter.chr 
         4945            10           874          2537             0 
GRanges with 40 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 26,  26]      *
   [3]     chrA [ 51,  51]      *
   [4]     chrA [ 76,  76]      *
   [5]     chrA [101, 101]      *
   ...      ...        ...    ...
  [36]     chrA [876, 876]      *
  [37]     chrA [901, 901]      *
  [38]     chrA [926, 926]      *
  [39]     chrA [951, 951]      *
  [40]     chrA [976, 976]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(5000, 10, c(chrA=1000, chrB=2000), spacing=25, max.frag=100)
        total        single    unoriented mate.unmapped     inter.chr 
         5366             5           545          2485           709 
        total        single    unoriented mate.unmapped     inter.chr 
        10010            10          1898             0          2467 
        total        single    unoriented mate.unmapped     inter.chr 
         8313             6          1306          1395          1722 
        total        single    unoriented mate.unmapped     inter.chr 
         5027             4           952          2467             0 
GRanges with 40 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 26,  26]      *
   [3]     chrA [ 51,  51]      *
   [4]     chrA [ 76,  76]      *
   [5]     chrA [101, 101]      *
   ...      ...        ...    ...
  [36]     chrA [876, 876]      *
  [37]     chrA [901, 901]      *
  [38]     chrA [926, 926]      *
  [39]     chrA [951, 951]      *
  [40]     chrA [976, 976]      *
  ---
  seqlengths:
   chrA
   1000
> 
> # Checking out restrictions on the max size.
> 
> checkcount(1000, 10, c(chrA=1000, chrB=2000), spacing=50, right=0)
        total        single    unoriented mate.unmapped     inter.chr 
         1065             2            96           505           139 
        total        single    unoriented mate.unmapped     inter.chr 
         2010            10           351             0           520 
        total        single    unoriented mate.unmapped     inter.chr 
         1645             9           247           310           328 
        total        single    unoriented mate.unmapped     inter.chr 
         1016             6           182           520             0 
GRanges with 20 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 51,  51]      *
   [3]     chrA [101, 101]      *
   [4]     chrA [151, 151]      *
   [5]     chrA [201, 201]      *
   ...      ...        ...    ...
  [16]     chrA [751, 751]      *
  [17]     chrA [801, 801]      *
  [18]     chrA [851, 851]      *
  [19]     chrA [901, 901]      *
  [20]     chrA [951, 951]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(1000, 20, c(chrA=1000, chrB=2000), spacing=100, right=20)
        total        single    unoriented mate.unmapped     inter.chr 
         1116            11           112           495           158 
        total        single    unoriented mate.unmapped     inter.chr 
         2020            20           376             0           510 
        total        single    unoriented mate.unmapped     inter.chr 
         1732            19           281           251           366 
        total        single    unoriented mate.unmapped     inter.chr 
          979            15           176           510             0 
GRanges with 10 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,  21]      *
   [2]     chrA [101, 121]      *
   [3]     chrA [201, 221]      *
   [4]     chrA [301, 321]      *
   [5]     chrA [401, 421]      *
   [6]     chrA [501, 521]      *
   [7]     chrA [601, 621]      *
   [8]     chrA [701, 721]      *
   [9]     chrA [801, 821]      *
  [10]     chrA [901, 921]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(2000, 50, c(chrA=1000, chrB=2000), spacing=100, right=10, max.frag=200)
        total        single    unoriented mate.unmapped     inter.chr 
         2129            25           210           988           281 
        total        single    unoriented mate.unmapped     inter.chr 
         4050            50           722             0          1005 
        total        single    unoriented mate.unmapped     inter.chr 
         3555            44           572           433           752 
        total        single    unoriented mate.unmapped     inter.chr 
         2000            21           365          1005             0 
GRanges with 10 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,  11]      *
   [2]     chrA [101, 111]      *
   [3]     chrA [201, 211]      *
   [4]     chrA [301, 311]      *
   [5]     chrA [401, 411]      *
   [6]     chrA [501, 511]      *
   [7]     chrA [601, 611]      *
   [8]     chrA [701, 711]      *
   [9]     chrA [801, 811]      *
  [10]     chrA [901, 911]      *
  ---
  seqlengths:
   chrA
   1000
> 
> # Checking out window extension details.
> 
> checkcount(1000, 100, c(chrA=1000, chrB=2000), spacing=30, right=100)
        total        single    unoriented mate.unmapped     inter.chr 
         1092            55           100           483           137 
        total        single    unoriented mate.unmapped     inter.chr 
         2100           100           377             0           476 
        total        single    unoriented mate.unmapped     inter.chr 
         1837            89           299           222           347 
        total        single    unoriented mate.unmapped     inter.chr 
         1040            62           180           476             0 
GRanges with 34 ranges and 0 metadata columns:
       seqnames      ranges strand
          <Rle>   <IRanges>  <Rle>
   [1]     chrA  [  1, 101]      *
   [2]     chrA  [ 31, 131]      *
   [3]     chrA  [ 61, 161]      *
   [4]     chrA  [ 91, 191]      *
   [5]     chrA  [121, 221]      *
   ...      ...         ...    ...
  [30]     chrA [871,  971]      *
  [31]     chrA [901, 1000]      *
  [32]     chrA [931, 1000]      *
  [33]     chrA [961, 1000]      *
  [34]     chrA [991, 1000]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(1000, 0, c(chrA=1000, chrB=2000), spacing=20, left=100)
        total        single    unoriented mate.unmapped     inter.chr 
         1062             0           107           512           131 
        total        single    unoriented mate.unmapped     inter.chr 
         2000             0           373             0           489 
        total        single    unoriented mate.unmapped     inter.chr 
         1693             0           269           263           342 
        total        single    unoriented mate.unmapped     inter.chr 
          985             0           189           489             0 
GRanges with 50 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA    [1,  1]      *
   [2]     chrA    [1, 21]      *
   [3]     chrA    [1, 41]      *
   [4]     chrA    [1, 61]      *
   [5]     chrA    [1, 81]      *
   ...      ...        ...    ...
  [46]     chrA [801, 901]      *
  [47]     chrA [821, 921]      *
  [48]     chrA [841, 941]      *
  [49]     chrA [861, 961]      *
  [50]     chrA [881, 981]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(2000, 50, c(chrA=1000, chrB=2000), spacing=15, right=20, left=20)
        total        single    unoriented mate.unmapped     inter.chr 
         2146            27           219          1025           264 
        total        single    unoriented mate.unmapped     inter.chr 
         4050            50           757             0          1003 
        total        single    unoriented mate.unmapped     inter.chr 
         3562            48           580           438           767 
        total        single    unoriented mate.unmapped     inter.chr 
         2058            27           395          1003             0 
GRanges with 67 ranges and 0 metadata columns:
       seqnames      ranges strand
          <Rle>   <IRanges>  <Rle>
   [1]     chrA    [ 1, 21]      *
   [2]     chrA    [ 1, 36]      *
   [3]     chrA    [11, 51]      *
   [4]     chrA    [26, 66]      *
   [5]     chrA    [41, 81]      *
   ...      ...         ...    ...
  [63]     chrA [911,  951]      *
  [64]     chrA [926,  966]      *
  [65]     chrA [941,  981]      *
  [66]     chrA [956,  996]      *
  [67]     chrA [971, 1000]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(2000, 25, c(chrA=1000, chrB=2000), spacing=15, right=10, left=10, max.frag=200)
        total        single    unoriented mate.unmapped     inter.chr 
         2138            11           214           995           279 
        total        single    unoriented mate.unmapped     inter.chr 
         4025            25           767             0           989 
        total        single    unoriented mate.unmapped     inter.chr 
         3328            24           543           602           642 
        total        single    unoriented mate.unmapped     inter.chr 
         2002            13           382           989             0 
GRanges with 67 ranges and 0 metadata columns:
       seqnames      ranges strand
          <Rle>   <IRanges>  <Rle>
   [1]     chrA    [ 1, 11]      *
   [2]     chrA    [ 6, 26]      *
   [3]     chrA    [21, 41]      *
   [4]     chrA    [36, 56]      *
   [5]     chrA    [51, 71]      *
   ...      ...         ...    ...
  [63]     chrA [921,  941]      *
  [64]     chrA [936,  956]      *
  [65]     chrA [951,  971]      *
  [66]     chrA [966,  986]      *
  [67]     chrA [981, 1000]      *
  ---
  seqlengths:
   chrA
   1000
> 	
> # Checking out read extension for singles.
> 
> checkcount(1000, 0, c(chrA=1000, chrB=2000), spacing=20, ext=100)
        total        single    unoriented mate.unmapped     inter.chr 
         1073             0            99           493           154 
        total        single    unoriented mate.unmapped     inter.chr 
         2000             0           353             0           513 
        total        single    unoriented mate.unmapped     inter.chr 
         1726             0           267           240           384 
        total        single    unoriented mate.unmapped     inter.chr 
          999             0           172           513             0 
GRanges with 50 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA   [ 1,  1]      *
   [2]     chrA   [21, 21]      *
   [3]     chrA   [41, 41]      *
   [4]     chrA   [61, 61]      *
   [5]     chrA   [81, 81]      *
   ...      ...        ...    ...
  [46]     chrA [901, 901]      *
  [47]     chrA [921, 921]      *
  [48]     chrA [941, 941]      *
  [49]     chrA [961, 961]      *
  [50]     chrA [981, 981]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(2000, 50, c(chrA=1000, chrB=2000), spacing=50, ext=50)
        total        single    unoriented mate.unmapped     inter.chr 
         2135            33           196           984           301 
        total        single    unoriented mate.unmapped     inter.chr 
         4050            50           783             0           982 
        total        single    unoriented mate.unmapped     inter.chr 
         3544            41           573           445           773 
        total        single    unoriented mate.unmapped     inter.chr 
         2047            23           396           982             0 
GRanges with 20 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 51,  51]      *
   [3]     chrA [101, 101]      *
   [4]     chrA [151, 151]      *
   [5]     chrA [201, 201]      *
   ...      ...        ...    ...
  [16]     chrA [751, 751]      *
  [17]     chrA [801, 801]      *
  [18]     chrA [851, 851]      *
  [19]     chrA [901, 901]      *
  [20]     chrA [951, 951]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(5000, 10, c(chrA=1000, chrB=2000), spacing=25, ext=20)
        total        single    unoriented mate.unmapped     inter.chr 
         5341             4           535          2477           733 
        total        single    unoriented mate.unmapped     inter.chr 
        10010            10          1892             0          2494 
        total        single    unoriented mate.unmapped     inter.chr 
         8532             9          1365          1281          1809 
        total        single    unoriented mate.unmapped     inter.chr 
         5055             7           960          2494             0 
GRanges with 40 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 26,  26]      *
   [3]     chrA [ 51,  51]      *
   [4]     chrA [ 76,  76]      *
   [5]     chrA [101, 101]      *
   ...      ...        ...    ...
  [36]     chrA [876, 876]      *
  [37]     chrA [901, 901]      *
  [38]     chrA [926, 926]      *
  [39]     chrA [951, 951]      *
  [40]     chrA [976, 976]      *
  ---
  seqlengths:
   chrA
   1000
> 
> checkcount(5000, 20, c(chrA=1000, chrB=2000), spacing=25, ext=200)
        total        single    unoriented mate.unmapped     inter.chr 
         5360            13           543          2479           727 
        total        single    unoriented mate.unmapped     inter.chr 
        10020            20          1880             0          2491 
        total        single    unoriented mate.unmapped     inter.chr 
         8630            15          1383          1227          1810 
        total        single    unoriented mate.unmapped     inter.chr 
         5014             9           962          2491             0 
GRanges with 40 ranges and 0 metadata columns:
       seqnames     ranges strand
          <Rle>  <IRanges>  <Rle>
   [1]     chrA [  1,   1]      *
   [2]     chrA [ 26,  26]      *
   [3]     chrA [ 51,  51]      *
   [4]     chrA [ 76,  76]      *
   [5]     chrA [101, 101]      *
   ...      ...        ...    ...
  [36]     chrA [876, 876]      *
  [37]     chrA [901, 901]      *
  [38]     chrA [926, 926]      *
  [39]     chrA [951, 951]      *
  [40]     chrA [976, 976]      *
  ---
  seqlengths:
   chrA
   1000
> 	
> ###################################################################################################
> # Cleaning up.
> 
> unlink(dir, recursive=TRUE);
> 
> ###################################################################################################
> # End.
> 
> 
> 
> proc.time()
   user  system elapsed 
 96.708   0.288  97.264 
