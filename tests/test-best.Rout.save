
R version 3.0.3 (2014-03-06) -- "Warm Puppy"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This tests the correctness of the getBestTest function.
> 
> require(csaw)
Loading required package: csaw
Loading required package: GenomicRanges
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from 'package:stats':

    xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, as.vector, cbind, colnames, duplicated, eval, evalq,
    get, intersect, is.unsorted, lapply, mapply, match, mget, order,
    paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rep.int,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unlist

Loading required package: IRanges
Loading required package: XVector
Loading required package: Rsamtools
Loading required package: Biostrings
Loading required package: edgeR
Loading required package: limma

Attaching package: 'limma'

The following object is masked from 'package:BiocGenerics':

    plotMA

> comp <- function(alpha=1, beta=2, nids=10, max.weight=10) {
+ 	n <- 10000
+     ids<-round(runif(n, 1, nids))
+ 	tab <- data.frame(logFC=rnorm(n), PValue=rbeta(n, alpha, beta))
+ 	best<-getBestTest(ids, tab)
+ 
+ 	ref <- aggregate(tab$PValue ~ ids, FUN=function(x) { min(1, x*length(x)) }, data=NULL)	
+ 	xref <- aggregate(1:n ~ ids, FUN=function(x) { x[which.min(tab$PValue[x])] }, data=NULL)	
+ 	if (any(abs(best$PValue - ref[,2]) > 1e-6 * (ref[,2] + best$PValue)) ||
+ 			!identical(best$best, xref[,2]) ) {
+ 		stop("best p-value doesn't match reference") 
+ 	}
+ 
+ 	# With window weighting.
+ 	w<-round(runif(n, 1, max.weight))
+ 	best<-getBestTest(ids, tab, weight=w)
+ 	ref <- aggregate(1:n ~ ids, FUN=function(x) { min(1, tab$PValue[x]/w[x]*sum(w[x])) }, data=NULL)	
+ 	xref <- aggregate(1:n ~ ids, FUN=function(x) { x[which.min(tab$PValue[x]/w[x])] }, data=NULL)	
+ 	if (any(abs(best$PValue - ref[,2]) > 1e-6 * (ref[,2] + best$PValue)) ||
+ 			!identical(best$best, xref[,2]) ) {
+ 		stop("best p-value doesn't match reference after weighting") 
+ 	}
+ 	
+ 	return(head(best))	
+ }
> 
> set.seed(3479102)
> 
> comp()
  best    PValue       FDR
1 1355 0.2420148 0.5585511
2 2197 0.2843073 0.5585511
3 8092 1.0000000 1.0000000
4 7804 0.7117003 0.8896254
5 3082 0.2452656 0.5585511
6 5689 1.0000000 1.0000000
> comp(1,1)
  best    PValue FDR
1 5457 1.0000000   1
2 3857 0.8945246   1
3 8820 0.5701876   1
4 6423 0.2498259   1
5 2620 0.7238982   1
6 7567 1.0000000   1
> comp(1,3)
  best     PValue       FDR
1 5014 0.05198237 0.1133688
2 6578 0.28302236 0.2830224
3 4538 0.06802126 0.1133688
4 5770 0.05917198 0.1133688
5 1404 0.03659967 0.1133688
6 3948 0.11753755 0.1484187
> comp(1,5)
  best    PValue       FDR
1 2478 0.2419032 0.3023790
2 4598 0.1681725 0.2916825
3 2096 0.0161638 0.1616380
4 6202 0.1209636 0.2916825
5 4890 0.1048946 0.2916825
6 5272 0.1103564 0.2916825
> comp(2,1)
  best PValue FDR
1 9820      1   1
2 8382      1   1
3 1309      1   1
4 2942      1   1
5 7249      1   1
6 6498      1   1
> comp(2,3)
  best PValue FDR
1 6365      1   1
2 1211      1   1
3 4946      1   1
4 3413      1   1
5 3935      1   1
6 2222      1   1
> comp(2,5)
  best PValue FDR
1 2176      1   1
2 4146      1   1
3 5350      1   1
4 9137      1   1
5 7685      1   1
6 8494      1   1
> 
> comp(nids=1000)
  best    PValue       FDR
1 5779 0.3553264 0.6944757
2 8557 0.4197727 0.7237461
3 7095 0.2158333 0.6237958
4 9270 0.4361151 0.7396872
5 6875 0.1792723 0.5923354
6  101 0.3813966 0.7027675
> comp(1,1, nids=100)
  best    PValue FDR
1 5422 0.9745505   1
2 6827 0.5630003   1
3 5210 1.0000000   1
4 1668 0.6352708   1
5 9386 0.5703123   1
6 4778 1.0000000   1
> comp(1,3, nids=1000)
  best     PValue       FDR
1 1037 0.01206666 0.2696691
2 3099 0.04644712 0.3329278
3 5393 0.47375119 0.6161993
4 2370 0.07644078 0.3561380
5 9677 0.61763443 0.7354485
6 4930 0.18336090 0.4295013
> comp(1,5, nids=5000)
  best     PValue       FDR
2 4610 0.35511143 0.4053159
3 3255 0.40995482 0.4495165
4 2007 0.11156439 0.2464271
5  415 0.16241231 0.2770297
6 6327 0.07179727 0.2265755
7 7404 0.08993568 0.2364002
> comp(2,1, nids=50)
  best PValue FDR
1 2479      1   1
2 5826      1   1
3 4733      1   1
4 3413      1   1
5 9738      1   1
6 9716      1   1
> comp(2,3, nids=100)
  best PValue FDR
1 9097      1   1
2 5501      1   1
3  375      1   1
4 4030      1   1
5 2909      1   1
6 2538      1   1
> comp(2,5, nids=500)
  best    PValue FDR
1 5866 0.7322610   1
2 4376 1.0000000   1
3 4394 0.4627148   1
4 4820 1.0000000   1
5 7013 0.8354557   1
6 5636 0.9482580   1
> 
> comp(1,1, nids=1000, max.weight=2)
  best    PValue FDR
1 3266 1.0000000   1
2 3749 1.0000000   1
3 2838 0.2060216   1
4  478 0.6332597   1
5 6351 1.0000000   1
6 5048 0.1698590   1
> comp(1,3, nids=1000, max.weight=5)
  best     PValue       FDR
1 7725 0.22945909 0.4714719
2 9082 0.50257097 0.6297780
3  717 0.04789314 0.3730641
4 6477 0.66759678 0.7501087
5 9388 0.20594928 0.4448149
6 2196 0.20339863 0.4421709
> comp(1,5, nids=5000, max.weight=10)
  best     PValue       FDR
1 2190 0.24349137 0.3332759
2 3851 0.07916608 0.2478070
3 3773 0.11923265 0.2574480
4 3586 0.10862298 0.2540793
5  980 0.11415713 0.2559226
6 2119 0.18704899 0.2967264
> comp(2,1, nids=20, max.weight=20)
  best PValue FDR
1 1580      1   1
2 7250      1   1
3 5068      1   1
4 2289      1   1
5 4228      1   1
6 4303      1   1
> comp(2,3, nids=30, max.weight=50)
  best PValue FDR
1 7343      1   1
2 8343      1   1
3 6787      1   1
4 1659      1   1
5 7505      1   1
6 6029      1   1
> comp(2,5, nids=50, max.weight=100)
  best   PValue FDR
1 7062 1.000000   1
2 1619 1.000000   1
3 1228 1.000000   1
4 3715 0.583366   1
5  664 1.000000   1
6 9971 1.000000   1
> 
> ##################################################################
> 
> proc.time()
   user  system elapsed 
  7.551   0.078   7.638 
