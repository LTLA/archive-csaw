
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # We test the correlateChIP function in 'csaw' against an equivalent version in R.
> 
> # We set up a function to generate a random SAM file.
> 
> source("simsam.R");
> 
> fdir<-"ccf-test";
> dir.create(fdir);
> outfname<-file.path(fdir, "out")
> 
> regen <- function(nreads, chromos) {
+ 	pos.chr<-sample(length(chromos), nreads, replace=TRUE)
+ 	pos.pos<-integer(nreads)
+ 	str<-logical(nreads)
+ 	for (i in 1:length(chromos)) {
+ 		current<-pos.chr==i
+ 		pos.pos[current]<-as.integer(round(runif(sum(current), 1, chromos[i])))
+ 		str[current]<-(rbinom(sum(current), 1, 0.5)==1);
+ 	}
+ 	simsam(outfname, names(chromos)[pos.chr], pos.pos, str, chromos);
+ }
> 
> suppressPackageStartupMessages(library(csaw))
> 
> manualcor<-function(bamx, n, cross) { 
+ 	chromos<-scanBamHeader(bamx)[[1]][[1]]
+ 	out<-0
+ 	total<-0
+ 	for (chr in names(chromos)) {
+ 		clen<-chromos[[chr]]
+ 		param <- ScanBamParam(what =c("pos", "qwidth", "strand"), which=GRanges(chr, IRanges(1, clen)))
+ 		reads<-list()
+ 		for (b in bamx) {
+ 			new.reads <- scanBam(b, param = param)[[1]]
+ 			reads$str<-c(reads$str, new.reads$str=="+")
+ 			reads$qwidth<-c(reads$qwidth, new.reads$qwidth)
+ 			reads$pos<-c(reads$pos, new.reads$pos)
+ 		}
+ 		f<-r<-rep(0, clen)
+ 
+ 		fx<-table(reads$pos[reads$str])
+ 		f[as.integer(names(fx))]<-as.integer(fx)
+ 
+ 		rx<-table(pmin(clen, reads$pos[!reads$str]+reads$qwidth[!reads$str]))
+ 		r[as.integer(names(rx))]<-as.integer(rx)
+ 
+ 		# Autocorrelations, if not cross-correaltions, so we just fuse them together.
+ 		if (!cross) {
+ 			f<-f+r
+ 			r<-f
+ 		}
+ 
+ 		nreads<-length(reads$pos)
+ 		out<-out+nreads*sapply(0:n, FUN=function(i){ 
+ 			if (i>=length(f)-1L || i>=length(r)-1L) { return(0) }
+ 			fr<-f[1:(length(f)-i)]
+ 			rr<-r[(i+1):length(r)]
+ 			if (sd(fr)==0 || sd(rr)==0) { return(0) }
+ 			cor(fr, rr)
+ 		})
+ 		total<-total+nreads
+ 	}
+ 	out/total
+ }
> 
> comp<-function(bamFiles, n, cross=TRUE) {
+ 	precision<-1e-8
+ 	out<-manualcor(bamFiles, n, cross=cross)
+ 	out2<-correlateReads(bamFiles, n, cross=cross)
+ 	if (length(out)!=length(out2)) { stop("mismatch in length of output vector"); }
+ 	if (any( abs((out-out2)/(abs(out)+precision)) > precision ))  { stop("mismatch in correlation coefficients"); }
+ 	head(out)
+ }
> 
> ###################################################################################################
> # Testing with some data.
> 
> set.seed(10);
> bamFile<-regen(1000, c(chrA=10000))
> comp(bamFile, 50)
[1] -5.824506e-03 -1.553824e-02 -8.933974e-06 -5.746695e-03 -7.695080e-03
[6]  5.904627e-03
> comp(bamFile, 100)
[1] -5.824506e-03 -1.553824e-02 -8.933974e-06 -5.746695e-03 -7.695080e-03
[6]  5.904627e-03
> 
> # And again...
> 
> bamFile<-regen(1000, c(chrA=10000))
> comp(bamFile, 50)
[1] -0.001975336  0.005940889  0.017817803 -0.001990220  0.007906444
[6]  0.001960522
> comp(bamFile, 100)
[1] -0.001975336  0.005940889  0.017817803 -0.001990220  0.007906444
[6]  0.001960522
> 
> # Repeating with more reads.
> 
> bamFile<-regen(2000, c(chrA=10000))
> comp(bamFile, 50)
[1]  1.619969e-02  5.127700e-03  3.106390e-03  7.937089e-05 -1.401015e-02
[6]  3.076325e-03
> comp(bamFile, 100)
[1]  1.619969e-02  5.127700e-03  3.106390e-03  7.937089e-05 -1.401015e-02
[6]  3.076325e-03
> 
> # Trying it out with multiple chromosomes.
> 
> bamFile<-regen(5000, c(chrA=10000, chrB=5000))
> comp(bamFile, 50)
[1] -0.002598292 -0.003473870  0.010611247  0.005386998 -0.004938632
[6] -0.008151512
> comp(bamFile, 100)
[1] -0.002598292 -0.003473870  0.010611247  0.005386998 -0.004938632
[6] -0.008151512
> 
> # And again, with more reads.
> 
> bamFile<-regen(10000, c(chrA=10000, chrB=5000))
> comp(bamFile, 50)
[1] -0.003510803 -0.014312800  0.012628067 -0.014907258  0.022053461
[6] -0.009835785
> comp(bamFile, 100)
[1] -0.003510803 -0.014312800  0.012628067 -0.014907258  0.022053461
[6] -0.009835785
> 
> # Trying it out with multiple BAM files.
> 
> bamFiles<-c(regen(500, c(chrA=1000, chrB=500)), regen(500, c(chrA=1000, chrB=500)))
> comp(bamFiles, 50)
[1] -0.001446651  0.019668147 -0.002336510 -0.029212227 -0.032508883
[6] -0.022785831
> comp(bamFiles, 100)
[1] -0.001446651  0.019668147 -0.002336510 -0.029212227 -0.032508883
[6] -0.022785831
> 
> # And again, with more reads.
> 
> bamFiles<-c(regen(5000, c(chrA=10000, chrB=5000)), regen(5000, c(chrA=10000, chrB=5000)))
> comp(bamFiles, 50)
[1] -0.003979427 -0.010792535  0.009234520  0.003793809  0.002073750
[6]  0.007656343
> comp(bamFiles, 100)
[1] -0.003979427 -0.010792535  0.009234520  0.003793809  0.002073750
[6]  0.007656343
> 
> ###################################################################################################
> # Repeating; but this time, looking at autocorrelations.
> 
> set.seed(1034785)
> bamFile<-regen(1000, c(chrA=10000))
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000e+00 -1.388791e-02 -8.905914e-03  6.991125e-05  4.053701e-03
[6] -9.485049e-04
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000e+00 -1.388791e-02 -8.905914e-03  6.991125e-05  4.053701e-03
[6] -9.485049e-04
> 
> # And again...
> 
> bamFile<-regen(1000, c(chrA=10000))
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000  0.026797741  0.003267677  0.004285020 -0.000863102
[6]  0.005292172
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000  0.026797741  0.003267677  0.004285020 -0.000863102
[6]  0.005292172
> 
> # Repeating with more reads.
> 
> bamFile<-regen(2000, c(chrA=10000))
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.002891568 -0.007367711 -0.005902206 -0.003446322
[6] -0.005348653
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.002891568 -0.007367711 -0.005902206 -0.003446322
[6] -0.005348653
> 
> # Trying it out with multiple chromosomes.
> 
> bamFile<-regen(5000, c(chrA=10000, chrB=5000))
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.006114789  0.001338672  0.007825041  0.001030004
[6]  0.010882434
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.006114789  0.001338672  0.007825041  0.001030004
[6]  0.010882434
> 
> # And again, with more reads.
> 
> bamFile<-regen(10000, c(chrA=10000, chrB=5000))
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000  0.013889222 -0.015875326  0.002614008  0.005602877
[6]  0.014227690
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000  0.013889222 -0.015875326  0.002614008  0.005602877
[6]  0.014227690
> 
> # Trying it out with multiple BAM files.
> 
> bamFiles<-c(regen(500, c(chrA=1000, chrB=500)), regen(500, c(chrA=1000, chrB=500)))
> comp(bamFiles, 50, cross=FALSE)
[1]  1.000000000  0.028375726  0.015615753 -0.019385647  0.065248369
[6]  0.002885287
> comp(bamFiles, 100, cross=FALSE)
[1]  1.000000000  0.028375726  0.015615753 -0.019385647  0.065248369
[6]  0.002885287
> 
> # And again, with more reads.
> 
> bamFiles<-c(regen(5000, c(chrA=10000, chrB=5000)), regen(5000, c(chrA=10000, chrB=5000)))
> comp(bamFiles, 50, cross=FALSE)
[1]  1.000000000  0.005345227 -0.002268170 -0.001925157 -0.004059153
[6] -0.005215345
> comp(bamFiles, 100, cross=FALSE)
[1]  1.000000000  0.005345227 -0.002268170 -0.001925157 -0.004059153
[6] -0.005215345
> 
> ###################################################################################################
> # Throwing in some stress tests.
> 
> set.seed(789325)
> 
> # Where distance exceeds chromosome length.	
> 
> bamFile<-regen(10, c(chrA=20))
> comp(bamFile, 50, cross=TRUE)
[1] -0.12761066 -0.13528412 -0.14394032 -0.15378117 -0.16506802  0.07634799
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.05123155 -0.14594386 -0.24474543 -0.26409597 -0.08558165
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.05123155 -0.14594386 -0.24474543 -0.26409597 -0.08558165
> 
> bamFile<-regen(10, c(chrA=50))
> comp(bamFile, 50, cross=TRUE)
[1]  0.1179675  0.1160096  0.1139606 -0.1166754 -0.1195229  0.1071987
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000  0.01692183  0.01300751 -0.20009686  0.02588235  0.13043478
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000  0.01692183  0.01300751 -0.20009686  0.02588235  0.13043478
> 
> bamFile<-regen(5, c(chrA=100))
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.05319149 -0.05376344 -0.05434783  0.15604396 -0.05555556
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.05319149 -0.05376344 -0.05434783  0.15604396 -0.05555556
> 
> # When the number of reads is zero in one chromosome.
> 
> bamFile<-regen(1, c(chrA=100, chrB=200))
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.01020408 -0.01030928 -0.01041667 -0.01052632 -0.01063830
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.01020408 -0.01030928 -0.01041667 -0.01052632 -0.01063830
> 
> bamFile<-regen(2, c(chrA=100, chrB=200, chrC=30))
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.02038240 -0.02105659 -0.02178179 -0.02256410 -0.02341065
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.02038240 -0.02105659 -0.02178179 -0.02256410 -0.02341065
> 
> bamFile<-regen(1, c(chrA=100, chrB=200, chrC=30))
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1] 1 0 0 0 0 0
> comp(bamFile, 100, cross=FALSE)
[1] 1 0 0 0 0 0
> 
> ###################################################################################################
> # Cleaning out the directory.
> 
> unlink(fdir, recursive=TRUE);
> 
> ###################################################################################################
> # End.
> 
> proc.time()
   user  system elapsed 
 10.194   0.093  10.330 
