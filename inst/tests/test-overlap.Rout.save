
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This checks the overlap summarization functions, relative to the expected values.
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> source("simsam.R")
> 
> ####################################################################################################
> 
> compcombine <- function(ranges, windows) {
+ 	olap <- findOverlaps(ranges, windows)
+ 	ns <- length(windows)
+ 	tab <- data.frame(logFC=rnorm(ns), PValue=rbeta(ns, 1, 3), logCPM=rnorm(ns))
+ 
+ 	# Straight-up comparison to combineTests, after discarding all NA's.
+ 	output <- combineOverlaps(olap, tab)
+ 	refstats <- combineTests(queryHits(olap), tab[subjectHits(olap),])
+ 	if (!identical(data.frame(output[!is.na(output$PValue),]), refstats)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	# Testing with weights.
+ 	test.weight <- runif(ns)
+ 	output <- combineOverlaps(olap, tab, i.weight=test.weight)
+ 	refstats <- combineTests(queryHits(olap), tab[subjectHits(olap),], weight=test.weight[subjectHits(olap)])
+ 	if (!identical(data.frame(output[!is.na(output$PValue),]), refstats)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	# More weight testing, where o.weight is constructed from the weight for each i.weight.
+ 	output2 <- combineOverlaps(olap, tab, o.weight=test.weight[subjectHits(olap)])
+ 	if (!identical(output, output2)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	return(head(output))
+ }
> 
> set.seed(34823)
> 
> chromos <- c(A=1000, B=2000)
> 
> regions <- generateWindows(chromos, 10, 500)
> windows <- generateWindows(chromos, 100, 50)
> compcombine(regions, windows)
  nWindows logFC.up logFC.down    PValue       FDR
1      100       31         30 0.1956917 0.2609222
2       98       31         29 0.1900497 0.2609222
3       91       28         25 0.1756537 0.2609222
4       89       27         24 0.1723525 0.2609222
5       76       25         19 0.1426176 0.2609222
6       70       23         18 0.1327668 0.2609222
> 
> regions <- generateWindows(chromos, 10, 500)
> windows <- generateWindows(chromos, 200, 20)
> compcombine(regions, windows)
  nWindows logFC.up logFC.down    PValue       FDR
1      172       48         50 0.3368588 0.3368588
2      176       46         51 0.3202986 0.3368588
3      176       46         50 0.3276100 0.3368588
4      167       45         48 0.3329419 0.3368588
5      138       37         41 0.3047579 0.3368588
6      128       32         38 0.3243426 0.3368588
> 
> regions <- generateWindows(chromos, 2, 500)
> windows <- generateWindows(chromos, 100, 50)
> compcombine(regions, windows)
  nWindows logFC.up logFC.down     PValue        FDR
1       63       14         17 0.01341521 0.04024564
2       40       10          9 0.30930445 0.30930445
3       54        9         22 0.15477419 0.23216128
4       NA       NA         NA         NA         NA
> 
> ####################################################################################################
> 
> compbest <- function(ranges, windows) {
+ 	olap <- findOverlaps(ranges, windows)
+ 	ns <- length(windows)
+ 	tab <- data.frame(logFC=rnorm(ns), PValue=rbeta(ns, 1, 3), logCPM=rnorm(ns))
+ 
+ 	output <- getBestOverlaps(olap, tab)
+ 	refstats <- getBestTest(queryHits(olap), tab[subjectHits(olap),])
+ 	refstats$best <- subjectHits(olap)[refstats$best]
+ 	if (!identical(data.frame(output[!is.na(output$PValue),]), refstats)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	# Testing with weights.
+ 	test.weight <- runif(ns)
+ 	output <- getBestOverlaps(olap, tab, i.weight=test.weight)
+ 	refstats <- getBestTest(queryHits(olap), tab[subjectHits(olap),], weight=test.weight[subjectHits(olap)])
+ 	refstats$best <- subjectHits(olap)[refstats$best]
+ 	if (!identical(data.frame(output[!is.na(output$PValue),]), refstats)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	# More weight testing.
+ 	output2 <- getBestOverlaps(olap, tab, o.weight=test.weight[subjectHits(olap)])
+ 	if (!identical(output, output2)) { stop("mismatch in stats from near-identical calls!") }
+ 
+ 	return(head(output))
+ }
> 
> set.seed(34823)
> 
> regions <- generateWindows(chromos, 10, 50)
> windows <- generateWindows(chromos, 100, 50)
> compbest(regions, windows)
  best      logFC    PValue      logCPM       FDR
1    7  0.6748089 0.4457800  0.02483224 0.5244470
2   19  0.2366926 0.1597291  0.07599366 0.4239697
3   19  0.2366926 0.1932322  0.07599366 0.4239697
4   19  0.2366926 0.2003765  0.07599366 0.4239697
5   28  0.4075279 0.5403319 -0.99480039 0.6003688
6   49 -0.4738937 0.5793066  0.30209705 0.6097965
> 
> regions <- generateWindows(chromos, 10, 50)
> windows <- generateWindows(chromos, 200, 20)
> compbest(regions, windows)
  best      logFC    PValue     logCPM       FDR
1    6 -0.5707398 0.2022017 -0.4152887 0.4735273
2   31  0.1965924 0.2670659 -1.3963691 0.4735273
3   31  0.1965924 0.3314691 -1.3963691 0.4735273
4   40  0.6024175 0.3973439 -0.3733579 0.5297918
5   75 -0.3210386 0.2209506  1.2933353 0.4735273
6   75 -0.3210386 0.2161934  1.2933353 0.4735273
> 
> regions <- generateWindows(chromos, 2, 200)
> windows <- generateWindows(chromos, 100, 50)
> compbest(regions, windows)
  best       logFC     PValue     logCPM       FDR
1   59  0.05422212 0.01042087 -0.5052762 0.0312626
2   88 -0.38569489 0.67709618 -0.0336225 0.6770962
3  135 -0.86305967 0.11290449  1.5377097 0.1693567
4   NA          NA         NA         NA        NA
> 
> ####################################################################################################
> 
> compsummit <- function(ranges, windows) { 
+ 	olap <- findOverlaps(ranges, windows)
+ 	ns <- length(windows)
+ 	tab <- data.frame(logFC=rnorm(ns), PValue=rbeta(ns, 1, 3), logCPM=rnorm(ns))
+ 	output <- getBestOverlaps(olap, tab)
+ 
+ 	# Checking summit calls.
+ 	re.weight <- summitOverlaps(olap, output$best)
+ 	best.win <- output$best[queryHits(olap)]
+ 	is.summit <- !is.na(best.win) & best.win==subjectHits(olap)
+ 	re.weight2a <- summitOverlaps(olap, o.summit=is.summit)
+ 	re.weight2b <- summitOverlaps(olap, o.summit=which(is.summit))
+ 	if (!identical(re.weight, re.weight2a) || !identical(re.weight, re.weight2b)) { stop("mismatch in weighting of summits") }
+ 
+ 	isummits <- rbinom(ns, 1, 0.1)==1L
+ 	re.weight3 <- summitOverlaps(olap, o.summit=isummits[subjectHits(olap)])
+ 	re.weight4 <- summitOverlaps(olap, i.summit=isummits)
+ 	if (!identical(re.weight3, re.weight4)) { stop("mismatch in weighting of summits") }
+ 
+ 	# Checking the core upweightSummit machinery itself.
+ 	by.region <- split(is.summit, queryHits(olap))	
+ 	nu.weight <- sapply(by.region, FUN=function(x) {
+ 		N <- length(x)
+ 		output <- rep(1, N)
+ 		output[x] <- N/sum(x)
+ 		output	
+ 	})
+ 	if (!identical(re.weight, unlist(nu.weight, use.names=FALSE))) { stop("mismatch in manual weighting confirmation") }
+ 
+ 	return(head(re.weight))
+ }
> 
> set.seed(34823)
> 	
> regions <- generateWindows(chromos, 10, 50)
> windows <- generateWindows(chromos, 20, 50)
> compsummit(regions, windows)
[1] 1 1 1 4 1 1
> 
> regions <- generateWindows(chromos, 10, 50)
> windows <- generateWindows(chromos, 20, 20)
> compsummit(regions, windows)
[1] 1 1 3 1 1 3
> 
> regions <- generateWindows(chromos, 2, 200)
> windows <- generateWindows(chromos, 10, 50)
> compsummit(regions, windows)
[1] 1 1 1 4 1 5
> 
> ####################################################################################################
> 
> 
> proc.time()
   user  system elapsed 
  5.717   0.162   5.887 
