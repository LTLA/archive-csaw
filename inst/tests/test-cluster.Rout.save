
R Under development (unstable) (2015-12-22 r69809) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This tests the post-hoc clustering methods.
> 
> suppressPackageStartupMessages(require(csaw))
Warning messages:
1: multiple methods tables found for ‘relistToClass’ 
2: multiple methods tables found for ‘relistToClass’ 
3: multiple methods tables found for ‘relistToClass’ 
> compCFDR <- function(ids, threshold, weights) {
+     if (is.null(weights)) { 
+         obs.sizes <- table(ids) 
+     } else {
+         obs.sizes <- sapply(split(weights, ids), FUN=sum)
+     }
+     obs.sizes <- sort(obs.sizes)
+     num.fp <- sum(cumsum(obs.sizes) <= sum(obs.sizes) * threshold)
+     ref.fdr <- num.fp/length(obs.sizes)
+     test.fdr <- clusterFDR(ids, threshold, weight=weights)
+     stopifnot(all.equal(test.fdr, ref.fdr))
+     return(test.fdr)
+ }
> 
> set.seed(100)
> ids <- rnbinom(100, mu=5, size=10)
> compCFDR(ids, 0.05, NULL)
[1] 0.25
> compCFDR(ids, 0.1, NULL)
[1] 0.4166667
> compCFDR(ids, 0.05, runif(100))
[1] 0.25
> 
> ids <- rnbinom(100, mu=10, size=1)
> compCFDR(ids, 0.05, NULL)
[1] 0.1666667
> compCFDR(ids, 0.1, NULL)
[1] 0.3333333
> compCFDR(ids, 0.05, runif(100))
[1] 0.2333333
> 
> ids <- rnbinom(100, mu=100, size=20)
> compCFDR(ids, 0.05, NULL)
[1] 0.07692308
> compCFDR(ids, 0.1, NULL)
[1] 0.1538462
> compCFDR(ids, 0.05, runif(100))
[1] 0.1846154
> 
> ###################################################
> # Checking that the weighted p-value methods are correct.
> 
> set.seed(1000)
> pvals <- rbeta(1000, 1, 20)
> stopifnot(all.equal(p.adjust(pvals, method="BH"), csaw:::.weightedFDR(pvals, rep(1, length(pvals)))))
> pvals <- runif(1000)
> stopifnot(all.equal(p.adjust(pvals, method="BH"), csaw:::.weightedFDR(pvals, rep(1, length(pvals)))))
> pvals <- rep(1, 1000)
> stopifnot(all.equal(p.adjust(pvals, method="BH"), csaw:::.weightedFDR(pvals, rep(1, length(pvals)))))
> csaw:::.weightedFDR(numeric(0), numeric(0))
numeric(0)
> 
> ###################################################
> # Reference results for the consolidation function; also tests clusterWindows and controlClusterFDR.
> # There's not much point doing exact checks, because we'd just be re-implementing most of it.
> # Note that there's no guaratee that the results and the reported FDR are the same, as this depends
> # on the random p-values, so we don't check for equality.
> 
> checkResults <- function(data.list, result.list, ..., true.pos) {
+     out <- consolidateClusters(data.list, result.list, ...)
+ 
+     # Checking that the clustering is fine.
+     ref <- splitAsList(do.call(c, data.list), unlist(out$id))
+     stopifnot(all(unlist(range(ref))==out$region))
+ 
+     # Reporting the observed and estimated FDRs.
+     np <- out$region[!overlapsAny(out$region, true.pos),]
+     return(data.frame(Observed=length(np)/length(out$region), Estimated=out$FDR))
+ }
> 
> set.seed(100)
> windows <- GRanges("chrA", IRanges(1:1000, 1:1000))
> test.p <- runif(1000)
> test.p[rep(1:2, 100) + rep(0:99, each=2) * 10] <- 0 
> 
> true.pos <- windows[test.p==0]
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=0, true.pos=true.pos)
    Observed  Estimated
1 0.04761905 0.04761905
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=10, true.pos=true.pos)
  Observed Estimated
1        0         0
> 
> checkResults(list(windows, windows[1:10]), list(data.frame(PValue=test.p), data.frame(PValue=test.p[1:10])), tol=0, true.pos=true.pos) # Multiple entries
    Observed  Estimated
1 0.02912621 0.04854369
> checkResults(list(windows, windows[1:10]), list(data.frame(PValue=test.p), data.frame(PValue=test.p[1:10])), equiweight=FALSE, tol=0, true.pos=true.pos)
    Observed  Estimated
1 0.04761905 0.04761905
> 
> # Smaller number of regions
> set.seed(50)
> test.p <- runif(1000)
> test.p[rep(1:2, 50) + rep(0:49, each=2) * 10] <- 0  
> 
> true.pos <- windows[test.p==0]
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=0, true.pos=true.pos)
    Observed  Estimated
1 0.03846154 0.05769231
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=5, true.pos=true.pos)
    Observed  Estimated
1 0.05769231 0.05769231
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=5, target=0.1, true.pos=true.pos)
   Observed  Estimated
1 0.0754717 0.09433962
> checkResults(list(windows), list(data.frame(whee=test.p)), tol=2, pval.col="whee", true.pos=true.pos)
    Observed  Estimated
1 0.03846154 0.05769231
> 
> signs <- rbinom(100, 1, 0.5)!=0L
> checkResults(list(windows, windows[1:10]), list(data.frame(PValue=test.p), data.frame(PValue=test.p[1:10])), tol=0, sign=c(signs, signs[1:10]), true.pos=true.pos)
    Observed  Estimated
1 0.01818182 0.05454545
> 
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=0, grid.param=list(scale=5, iter=10), true.pos=true.pos) # Fiddling with grid search parameters.
    Observed  Estimated
1 0.03846154 0.05769231
> checkResults(list(windows), list(data.frame(PValue=test.p)), tol=0, grid.param=list(len=11, it=10), true.pos=true.pos)
    Observed  Estimated
1 0.03846154 0.05769231
> 
> ###################################################
> 
> proc.time()
   user  system elapsed 
 17.801   0.117  18.004 
