
R Under development (unstable) (2015-12-04 r69737) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # We test the correlateChIP function in 'csaw' against an equivalent version in R.
> 
> source("simsam.R")
> 
> fdir<-"ccf-test"
> dir.create(fdir)
> outfname<-file.path(fdir, "out")
> 
> suppressWarnings(suppressPackageStartupMessages(library(csaw)))
> 
> manualcor<-function(bamx, n, cross, minq=0, dedup=FALSE) { 
+ 	chromos<-scanBamHeader(bamx)[[1]][[1]]
+ 	out<-integer(n+1)
+ 	total<-0
+ 	for (chr in names(chromos)) {
+ 		clen<-chromos[[chr]]
+ 		param <- ScanBamParam(what=c("pos", "qwidth", "strand", "mapq"), which=GRanges(chr, IRanges(1, clen)),
+ 			flag=scanBamFlag(isDuplicate=ifelse(dedup, FALSE, NA)))
+ 		reads<-list()
+ 		for (b in bamx) {
+ 			new.reads <- scanBam(b, param = param)[[1]]	
+ 			keep <- new.reads$mapq >= minq
+ 			reads$str<-c(reads$str, new.reads$str[keep]=="+")
+ 			reads$qwidth<-c(reads$qwidth, new.reads$qwidth[keep])
+ 			reads$pos<-c(reads$pos, new.reads$pos[keep])
+ 		}
+ 		f<-r<-rep(0, clen+1L)
+ 
+ 		fx<-table(reads$pos[reads$str])
+ 		f[as.integer(names(fx))]<-as.integer(fx)
+ 
+ 		rx<-table(pmin(clen+1L, reads$pos[!reads$str]+reads$qwidth[!reads$str]))
+ 		r[as.integer(names(rx))]<-as.integer(rx)
+ 
+ 		# Autocorrelations, if not cross-correaltions, so we just fuse them together.
+ 		if (!cross) {
+ 			f<-f+r
+ 			r<-f
+ 		}
+        
+         # Ignoring chromosomes without forward or reverse reads, if we want 'cross'.
+         if (cross && (all(f==0) || all(r==0))) { next }
+ 
+ 		nreads<-length(reads$pos)
+ 		out<-out+nreads*sapply(0:n, FUN=function(i){ 
+ 			if (i>=length(f)-1L || i>=length(r)-1L) { return(0) }
+ 			fr<-f[1:(length(f)-i)]
+ 			rr<-r[(i+1):length(r)]
+ 			if (sd(fr)==0 || sd(rr)==0) { return(0) }
+ 			cor(fr, rr)
+ 		})
+ 		total<-total+nreads
+ 	}
+ 
+     # Avoid problems when total=0.
+ 	out/pmax(1, total)
+ }
> 
> comp<-function(bamFiles, n, cross=TRUE) {
+ 	precision<-1e-8
+     for (type in 3) {
+         if (type==1) {
+             dedup <- FALSE
+             minq <- 100
+         } else if (type==2) {
+             dedup <- TRUE
+             minq <- 0
+         } else if (type==3) {
+             dedup<- FALSE
+             minq <- 0
+         }
+ 		out<-manualcor(bamFiles, n, cross=cross, minq=minq, dedup=dedup)
+ 		out2<-correlateReads(bamFiles, n, cross=cross, readParam(minq=minq, dedup=dedup))
+ 		if (length(out)!=length(out2)) { stop("mismatch in length of output vector"); }
+ 		if (any( abs((out-out2)/(abs(out)+precision)) > precision ))  { stop("mismatch in correlation coefficients"); }
+ 	}
+ 	head(out)
+ }
> 
> ###################################################################################################
> # Testing with some data.
> 
> set.seed(10);
> bamFile <- regen(1000, c(chrA=10000), outfname)
> comp(bamFile, 50)
[1] -5.819624e-03 -1.553331e-02 -4.078126e-06 -5.834273e-03 -7.690190e-03
[6]  5.909451e-03
> comp(bamFile, 100)
[1] -5.819624e-03 -1.553331e-02 -4.078126e-06 -5.834273e-03 -7.690190e-03
[6]  5.909451e-03
> 
> # And again...
> 
> bamFile <- regen(1000, c(chrA=10000), outfname)
> comp(bamFile, 50)
[1]  0.016058918 -0.007894990 -0.009895771 -0.017796939  0.016158808
[6] -0.011813958
> comp(bamFile, 100)
[1]  0.016058918 -0.007894990 -0.009895771 -0.017796939  0.016158808
[6] -0.011813958
> 
> # Repeating with more reads.
> 
> bamFile <- regen(2000, c(chrA=10000), outfname)
> comp(bamFile, 50)
[1] -0.001994336 -0.003021477  0.010188884  0.006110912 -0.003052080
[6] -0.002045288
> comp(bamFile, 100)
[1] -0.001994336 -0.003021477  0.010188884  0.006110912 -0.003052080
[6] -0.002045288
> 
> # Trying it out with multiple chromosomes.
> 
> bamFile <- regen(5000, c(chrA=10000, chrB=5000), outfname)
> comp(bamFile, 50)
[1] -0.002748178  0.017695771  0.001309153  0.002686348 -0.008374520
[6] -0.006027602
> comp(bamFile, 100)
[1] -0.002748178  0.017695771  0.001309153  0.002686348 -0.008374520
[6] -0.006027602
> 
> # And again, with more reads.
> 
> bamFile <- regen(10000, c(chrA=10000, chrB=5000), outfname)
> comp(bamFile, 50)
[1] -0.004131502  0.009062535 -0.009921696 -0.001421905  0.022076571
[6] -0.004818620
> comp(bamFile, 100)
[1] -0.004131502  0.009062535 -0.009921696 -0.001421905  0.022076571
[6] -0.004818620
> 
> # Trying it out with multiple BAM files.
> 
> bamFiles <- c(regen(500, c(chrA=1000, chrB=500), outfname), regen(500, c(chrA=1000, chrB=500), outfname))
> comp(bamFiles, 50)
[1]  0.039191436 -0.005628051  0.039503330  0.031754767 -0.019504334
[6]  0.031204058
> comp(bamFiles, 100)
[1]  0.039191436 -0.005628051  0.039503330  0.031754767 -0.019504334
[6]  0.031204058
> 
> # And again, with more reads.
> 
> bamFiles <- c(regen(5000, c(chrA=10000, chrB=5000), outfname), regen(5000, c(chrA=10000, chrB=5000), outfname))
> comp(bamFiles, 50)
[1]  0.002168928  0.011761449 -0.001073594 -0.007870388  0.003415956
[6]  0.017756502
> comp(bamFiles, 100)
[1]  0.002168928  0.011761449 -0.001073594 -0.007870388  0.003415956
[6]  0.017756502
> 
> ###################################################################################################
> # Repeating; but this time, looking at autocorrelations.
> 
> set.seed(1034785)
> bamFile <- regen(1000, c(chrA=10000), outfname)
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000e+00 -1.397206e-02 -8.895848e-03  7.988979e-05  4.063642e-03
[6] -9.385120e-04
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000e+00 -1.397206e-02 -8.895848e-03  7.988979e-05  4.063642e-03
[6] -9.385120e-04
> 
> # And again...
> 
> bamFile <- regen(1000, c(chrA=10000), outfname)
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.010863025  0.015278817 -0.017924316 -0.004858281
[6] -0.003862500
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.010863025  0.015278817 -0.017924316 -0.004858281
[6] -0.003862500
> 
> # Repeating with more reads.
> 
> bamFile <- regen(2000, c(chrA=10000), outfname)
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.004811116  0.006295479 -0.007660352  0.004351477
[6] -0.008202054
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.004811116  0.006295479 -0.007660352  0.004351477
[6] -0.008202054
> 
> # Trying it out with multiple chromosomes.
> 
> bamFile <- regen(5000, c(chrA=10000, chrB=5000), outfname)
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000  0.003820240  0.007609601  0.006630063 -0.000932466
[6]  0.001384160
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000  0.003820240  0.007609601  0.006630063 -0.000932466
[6]  0.001384160
> 
> # And again, with more reads.
> 
> bamFile <- regen(10000, c(chrA=10000, chrB=5000), outfname)
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.001084931  0.008585174  0.014965557 -0.001323569
[6]  0.003015901
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.001084931  0.008585174  0.014965557 -0.001323569
[6]  0.003015901
> 
> # Trying it out with multiple BAM files.
> 
> bamFiles <- c(regen(500, c(chrA=1000, chrB=500), outfname), regen(500, c(chrA=1000, chrB=500), outfname))
> comp(bamFiles, 50, cross=FALSE)
[1]  1.0000000000  0.0001836711  0.0099803003  0.0286800781 -0.0310525136
[6] -0.0360707672
> comp(bamFiles, 100, cross=FALSE)
[1]  1.0000000000  0.0001836711  0.0099803003  0.0286800781 -0.0310525136
[6] -0.0360707672
> 
> # And again, with more reads.
> 
> bamFiles <- c(regen(5000, c(chrA=10000, chrB=5000), outfname), regen(5000, c(chrA=10000, chrB=5000), outfname))
> comp(bamFiles, 50, cross=FALSE)
[1]  1.000000000  0.007154510  0.004145849 -0.003080406  0.010945422
[6] -0.001071346
> comp(bamFiles, 100, cross=FALSE)
[1]  1.000000000  0.007154510  0.004145849 -0.003080406  0.010945422
[6] -0.001071346
> 
> ###################################################################################################
> # Throwing in some stress tests.
> 
> set.seed(789325)
> 
> # Where distance exceeds chromosome length.	
> 
> bamFile <- regen(10, c(chrA=20), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] -0.1207615 -0.1276107 -0.1352841 -0.1439403 -0.1537812  0.0864642
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.04012862 -0.13234818 -0.22803727 -0.24474543 -0.06841631
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.04012862 -0.13234818 -0.22803727 -0.24474543 -0.06841631
> 
> bamFile <- regen(10, c(chrA=50), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] -0.0997155 -0.1019357 -0.1042572 -0.1066870 -0.1092329  0.1332183
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000  0.125000000  0.120512821 -0.263157895 -0.253004703
[6]  0.005776392
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000  0.125000000  0.120512821 -0.263157895 -0.253004703
[6]  0.005776392
> 
> bamFile <- regen(5, c(chrA=100), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.04682929 -0.04732485 -0.04783101 -0.04834812 -0.04887653
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.04682929 -0.04732485 -0.04783101 -0.04834812 -0.04887653
> 
> # When the number of reads is zero in one chromosome.
> 
> bamFile <- regen(1, c(chrA=100, chrB=200), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.000000000 -0.005025126 -0.005050505 -0.005076142 -0.005102041
[6] -0.005128205
> comp(bamFile, 100, cross=FALSE)
[1]  1.000000000 -0.005025126 -0.005050505 -0.005076142 -0.005102041
[6] -0.005128205
> 
> bamFile <- regen(2, c(chrA=100, chrB=200, chrC=30), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.02040816 -0.02061856 -0.02083333 -0.02105263 -0.02127660
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.02040816 -0.02061856 -0.02083333 -0.02105263 -0.02127660
> 
> bamFile <- regen(1, c(chrA=100, chrB=200, chrC=30), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1]  1.00000000 -0.03448276 -0.03571429 -0.03703704 -0.03846154 -0.04000000
> comp(bamFile, 100, cross=FALSE)
[1]  1.00000000 -0.03448276 -0.03571429 -0.03703704 -0.03846154 -0.04000000
> 
> # Where the chromosome length is literally too small to compute correlations.
> 
> bamFile <- regen(1, c(chrA=1, chrB=1), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] 0 0 0 0 0 0
> comp(bamFile, 50, cross=FALSE)
[1] 1 0 0 0 0 0
> comp(bamFile, 100, cross=FALSE)
[1] 1 0 0 0 0 0
> 
> bamFile <- regen(10, c(chrA=1, chrB=1), outfname)
> comp(bamFile, 50, cross=TRUE)
[1] -1  0  0  0  0  0
> comp(bamFile, 50, cross=FALSE)
[1] 1 0 0 0 0 0
> comp(bamFile, 100, cross=FALSE)
[1] 1 0 0 0 0 0
> 
> ###################################################################################################
> # Cleaning out the directory.
> 
> unlink(fdir, recursive=TRUE);
> 
> ###################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
  9.977   0.142  10.119 
