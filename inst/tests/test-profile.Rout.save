
R version 3.4.0 RC (2017-04-18 r72535) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################
> # This tests the profileSites command, to ensure that it's actually giving proper advice.
> 
> source("simsam.R")
> 
> sdir<-"profile-test"
> dir.create(sdir)
> outfname <- file.path(sdir, "out")
> 
> suppressWarnings(suppressPackageStartupMessages(require(csaw)))
> 
> comp <- function(nreads, chromos, ext=100, width=200, res=50, minq=NA, dedup=FALSE, 
+ 		use.strand=FALSE, match.strand=FALSE, final.mode=NA) { 
+ 	# Simulating first.
+ 	bam <- regen(nreads, chromos, outfname)
+ 	windows <- generateWindows(chrs=chromos, winsize=res, nwin=20)
+ 	nwin <- length(windows)
+ 	if (match.strand) { use.strand <- TRUE }
+ 	if (use.strand) { strand(windows) <- sample(c("+", "-", "*"), nwin, replace=TRUE) }
+ 
+ 	# Running profileSites.
+ 	xparam <- readParam(minq=minq, dedup=dedup)
+     if (!is.na(final.mode)){ ext <- list(ext, final.mode) }
+ 	if (match.strand) { xparam2 <- reform(xparam, forward=NULL) }
+ 	else { xparam2 <- xparam }
+ 	strand.string <- ifelse(use.strand, ifelse(match.strand, "match", "use"), "ignore")
+ 	all.profiles <- profileSites(bam, windows, ext=ext, range=width, average=FALSE, param=xparam2, strand=strand.string)
+ 
+     # Checking names.
+     if (!identical(colnames(all.profiles), as.character((-width):width))) {
+         stop("column names are not as expected")
+     }
+ 
+     # Checking the normalization/averaging options are good.
+ 	none <- profileSites(bam, windows, ext=ext, range=width, param=xparam2, strand=strand.string)
+     ref.none <- colMeans(all.profiles)
+ 	if (!isTRUE(all.equal(ref.none, none))) { stop("unnormalized coverage profiles don't match up with manual average") }
+ 	total <- profileSites(bam, windows, ext=ext, range=width, param=xparam2, strand=strand.string, normalize="total")
+     ref.total <- colMeans(all.profiles/rowSums(all.profiles))
+ 	if (!isTRUE(all.equal(ref.total, total))) { stop("total-normalized coverage profiles don't match up with manual average") }
+ 	max <- profileSites(bam, windows, ext=ext, range=width, param=xparam2, strand=strand.string, normalize="max")
+     ref.max <- colMeans(all.profiles/apply(all.profiles, 1, max))
+ 	if (!isTRUE(all.equal(ref.max, max))) { stop("max-normalized coverage profiles don't match up with manual average") }
+ 
+ 	# Running the reference analysis.
+ 	totally <- totally.reverse <- list()
+ 	for (chr in names(chromos)) {
+         out <- extractReads(bam, GRanges(chr, IRanges(1, chromos[[chr]])), param=xparam, ext=ext)
+ 		if (!match.strand) { 
+ 			totally[[chr]] <- coverage(ranges(out), width=chromos[[chr]]) 
+ 		} else {
+ 			rev.read <- strand(out)=="-"
+ 			totally[[chr]] <- coverage(ranges(out)[!rev.read], width=chromos[[chr]]) 
+ 			totally.reverse[[chr]] <- coverage(ranges(out)[rev.read], width=chromos[[chr]]) 
+ 		}
+ 	} 
+ 
+ 	relevant.start <- start(windows) - width
+ 	relevant.end <- start(windows) + width
+ 	if (use.strand) { 
+ 		reverse <- as.logical(strand(windows)=="-")
+ 		relevant.start[reverse] <- end(windows[reverse]) + width # Automatic reversal for reverse-stranded regions.
+ 		relevant.end[reverse] <- end(windows[reverse]) - width
+ 	}
+ 	totes.prof <- integer(width*2+1)
+ 	for (x in seq_len(nwin)) {
+ 		curchr <- as.character(seqnames(windows[x]))
+ 		relevant <- relevant.start[x]:relevant.end[x]
+ 		valid <- relevant > 0L & relevant <= chromos[[curchr]]
+ 				
+ 		# Using reverse coverage if match.strand is TRUE.
+ 		if (match.strand && reverse[x]) { 
+ 			chosen <- totally.reverse			
+ 		} else {
+ 			chosen <- totally
+ 		}
+         cur.prof <- as.integer(chosen[[curchr]][relevant[valid]])
+         if (!identical(cur.prof, unname(all.profiles[x,valid]))) { 
+             stop("region-specific coverage profile doesn't match up") 
+         } else if (!all(all.profiles[x,!valid]==0)) {
+             stop("non-zero entries for invalid coverage values")
+         }
+ 	}
+ 
+ 	# Evaluating the two methods.
+ 	return(head(none))
+ }
> 
> ############################################################
> # Fairly hefty simulations are necessary here.
> 
> set.seed(123123)
> nreads <- 5000
> chromos <- c(chrA=10000, chrB=5000)
> comp(nreads, chromos)
  -200   -199   -198   -197   -196   -195 
35.450 35.300 35.375 35.650 35.475 35.475 
> comp(nreads, chromos, minq=100)
  -200   -199   -198   -197   -196   -195 
23.800 23.925 23.650 23.675 23.600 23.800 
> comp(nreads, chromos, dedup=TRUE)
  -200   -199   -198   -197   -196   -195 
29.100 29.100 29.050 29.100 29.125 28.975 
> 
> comp(nreads, chromos, ext=50)
  -200   -199   -198   -197   -196   -195 
17.875 17.850 17.875 17.750 18.000 18.100 
> comp(nreads, chromos, ext=200)
  -200   -199   -198   -197   -196   -195 
69.750 69.950 70.000 70.150 70.250 70.425 
> comp(nreads, chromos, width=100)
  -100    -99    -98    -97    -96    -95 
36.800 36.900 36.825 36.975 36.950 37.150 
> comp(nreads, chromos, width=500)
  -500   -499   -498   -497   -496   -495 
31.725 31.925 32.000 32.025 32.050 31.950 
> 
> comp(nreads, chromos, res=20)
  -200   -199   -198   -197   -196   -195 
36.625 36.650 36.600 36.675 36.750 36.825 
> comp(nreads, chromos, res=20, width=100)
  -100    -99    -98    -97    -96    -95 
37.025 37.100 37.000 37.125 36.975 36.850 
> comp(nreads, chromos, res=100)
  -200   -199   -198   -197   -196   -195 
37.575 37.675 37.575 37.625 37.725 37.675 
> comp(nreads, chromos, res=100, width=500)
  -500   -499   -498   -497   -496   -495 
33.200 33.125 33.175 33.375 33.400 33.575 
> 
> comp(nreads, chromos, res=20, dedup=TRUE)
  -200   -199   -198   -197   -196   -195 
27.050 27.125 27.175 27.175 27.075 27.200 
> comp(nreads, chromos, res=100, minq=100)
  -200   -199   -198   -197   -196   -195 
24.050 24.000 23.900 23.925 24.275 24.250 
> comp(nreads, chromos, width=100, dedup=TRUE)
  -100    -99    -98    -97    -96    -95 
27.950 27.750 27.700 27.475 27.350 27.275 
> comp(nreads, chromos, width=500, minq=100)
  -500   -499   -498   -497   -496   -495 
21.900 22.075 22.200 22.300 22.275 22.250 
> 
> # Checking effect of stranded options.
> 
> comp(nreads, chromos, res=20, use.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
36.750 36.700 36.725 36.775 36.775 36.950 
> comp(nreads, chromos, res=100, use.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
35.225 35.175 35.300 35.525 35.650 35.775 
> comp(nreads, chromos, use.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
37.550 37.600 37.425 37.450 37.625 37.600 
> comp(nreads, chromos, use.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
35.950 35.900 35.875 35.650 35.625 35.675 
> 
> comp(nreads, chromos, res=20, match.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
18.575 18.450 18.325 18.425 18.550 18.400 
> comp(nreads, chromos, res=100, match.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
17.350 17.225 17.300 17.300 17.325 17.300 
> comp(nreads, chromos, match.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
18.200 18.150 18.150 18.200 18.025 18.050 
> comp(nreads, chromos, match.strand=TRUE)
  -200   -199   -198   -197   -196   -195 
16.725 16.600 16.625 16.500 16.525 16.525 
> 
> # Just exercising the multi-fragment length options here.
> 
> comp(nreads, chromos, ext=50, final.mode=50)
  -200   -199   -198   -197   -196   -195 
17.275 17.275 17.325 17.225 17.275 17.250 
> comp(nreads, chromos, ext=50, final.mode=100)
  -200   -199   -198   -197   -196   -195 
36.875 36.950 37.150 37.000 37.050 36.925 
> comp(nreads, chromos, ext=50, final.mode=20)
 -200  -199  -198  -197  -196  -195 
7.050 7.150 7.350 7.375 7.225 7.250 
> 
> ############################################################
> # Cleaning up.
> 
> unlink(sdir, recursive=TRUE)
> 
> ############################################################
> 
> proc.time()
   user  system elapsed 
 18.532   0.228  18.776 
